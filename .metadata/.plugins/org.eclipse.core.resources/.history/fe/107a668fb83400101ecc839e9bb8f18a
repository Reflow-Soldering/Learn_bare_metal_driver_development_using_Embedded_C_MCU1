/*
 * stm32f407xx.h
 *
 *  Created on: May 18, 2025
 *      Author: user
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

//stdint.h 사용이유
/*
 * stdint.h는 uint16_t, uint8_t 등 변수의 형태를
 * 규정하므로 반드시 필요하다
 */
#include <stdint.h>

//volatile define
/*
 * 일일히 volatile을 쓸 수 없으므로 약어로 정리
 */
#define __vo									volatile

/*This is address list of Memory*/
/*
 * 각 메모리의 시작 위치를 규정한다
 */
#define	FLASH_BASEADDR							0x08000000U /* FLASH Base Address is here*/
#define SRAM1_BASEADDR							0x20000000U	/* SRAM1 Base Address is here - 112KB*/
#define SRAM2_BASEADDR							0x20001C00U /* SRAM2 Base Address is here - 16KB*/
#define ROM_BASEADDR							0x1FFF0000U /* ROM Base Address is here*/
#define SRAM									SRAM1_BASEADDR /* Equal SRAM1 Base Address*/

/*This is address list of Peripheral*/
/*
 * 각 BUS의 시작 메모리를 규정
 */

#define PERIPH_BASE								0x40000000U
#define APB1PHERIPH_BASE						PERIPH_BASE
#define APB2PHERIPH_BASE						0x40010000U
#define AHB1PHERIPH_BASE						0x40020000U
#define AHB2PHERIPH_BASE						0x50000000U


/* Base Addresses of GPIOx
 * GPIO is haning of AHB1 Bus
 *
 */

#define	GPIOA_BASEADDR							(AHB1PHERIPH_BASE + 0x0000)
#define GPIOB_BASEADDR							(AHB1PHERIPH_BASE + 0x0400)
#define GPIOC_BASEADDR							(AHB1PHERIPH_BASE + 0x0800)
#define GPIOD_BASEADDR							(AHB1PHERIPH_BASE + 0x0C00)
#define GPIOE_BASEADDR							(AHB1PHERIPH_BASE + 0x1000)
#define GPIOF_BASEADDR							(AHB1PHERIPH_BASE + 0x1400)
#define GPIOG_BASEADDR							(AHB1PHERIPH_BASE + 0x1800)
#define GPIOH_BASEADDR							(AHB1PHERIPH_BASE + 0x1C00)
#define GPIOI_BASEADDR							(AHB1PHERIPH_BASE + 0x2000)

#define RCC_BASEADDR							(AHB1PHERIPH_BASE + 0x3800)

/* BASE Addresses of peripherals
 * hanging on APB1  Bus
 *
 *
 */
//This is I2C Peripherals
#define I2C1_BASEADDR							(APB1PHERIPH_BASE + 0x5400)
#define I2C2_BASEADDR							(APB1PHERIPH_BASE + 0x5800)
#define I2C3_BASEADDR							(APB1PHERIPH_BASE + 0x5C00)

//This is SPI Peripherals
#define SPI2_BASEADDR							(APB1PHERIPH_BASE + 0x3800)
#define SPI3_BASEADDR							(APB1PHERIPH_BASE + 0x3C00)

#define SPI2_CR1								(SPI2_BASEADDR + 0x00)		//SPI Control Register 1
#define SPI2_CR2								(SPI2_BASEADDR + 0x04)		//SPI Control Register 2
#define SPI2_SR									(SPI2_BASEADDR + 0x08)		//SPI Status Register
#define SPI2_DR									(SPI2_BASEADDR + 0x0C)		//SPI Data Register
#define SPI2_CRCPR								(SPI2_BASEADDR + 0x10)		//SPI CRC Polynomial Register - No I2S Mode
#define SPI2_RXCRCR								(SPI2_BASEADDR + 0x14)		//SPI RX CRC Register - No I2S Mode
#define SPI2_TXCRCR								(SPI2_BASEADDR + 0x18)		//SPI TX CRC Register - No I2S Mode
#define SPI2_I2SCFGR							(SPI2_BASEADDR + 0x1C)		//SPI I2S Configuration Register
#define SPI2_I2SPR								(SPI2_BASEADDR + 0x20)		//SPI I2S Prescaler Register




//This is USART Peripherals
#define USART2_BASEADDR							(APB1PHERIPH_BASE + 0x4400)
#define USART3_BASEADDR							(APB1PHERIPH_BASE + 0x4800)

//this is UART Peripherals
#define UART4_BASEADDR							(APB1PHERIPH_BASE + 0x4C00)
#define UART5_BASEADDR							(APB1PHERIPH_BASE + 0x5000)

/*
 * These are not used and were not written in data sheet
 * But, These are written in Reference Manual
 */

//#define UART7_BASEADDR							(APB1PHERIPH_BASE + 0x7800)
//#define UART8_BASEADDR							(APB1PHERIPH_BASE + 0x7C00)




/* BASE Addresses of peripherals
 * hanging on APB2  Bus
 *
 *
 */

#define	EXTI_BASEADDR							(APB2PHERIPH_BASE + 0x3C00)

//This is USART Peripherals
#define USART1_BASEADDR							(APB2PHERIPH_BASE + 0x1000)
#define USART6_BASEADDR							(APB2PHERIPH_BASE + 0x1400)

//This is SPI Peripherals
#define SPI1_BASEADDR							(APB2PHERIPH_BASE + 0x3000)
#define SPI4_BASEADDR							(APB2PHERIPH_BASE + 0x3400)

//This is System Configuration
#define SYSCFG_BASEADDR							(APB2PHERIPH_BASE + 0x3800)


/*
 * 주변장치 레지스터 구조체
 * MCU에 있는 Peripheral 규정
 * Have to check Reference Manual
 */

/* GPIO Structure*/
typedef struct
{
	__vo uint32_t MODER;								//Input, Output, Analog, Alternative Function Select Register
	__vo uint32_t OTYPER;							//If some pins are selected output, define register used by output type
	__vo uint32_t OSPEEDR;							//If GPIO is configured by output, Speed configure register
	__vo uint32_t PUPDR;								//GPIO Pull-up, Pull-down Register
	__vo uint32_t IDR;								//GPIO Input data register, read word only
	__vo uint32_t ODR;								//GPIO Output Data register. Can read and write. Can change used by BSRR register
	__vo uint32_t BSRR;								//Port x reset, set bit
	__vo uint32_t LCKR;								//??????
	__vo uint32_t AFRL;								//Alternative Function Low register
	__vo uint32_t AFRH;								//Alternative Function High register
}GPIO_RegDef_t;

/*RCC Register Structure*/
typedef struct
{
	__vo uint32_t CR;
	__vo uint32_t PLLCFGR;
	__vo uint32_t CFGR;
	__vo uint32_t CIR;
	__vo uint32_t AHB1RSTR;
	__vo uint32_t AHB2RSTR;
	__vo uint32_t AHB3RSTR;
	__vo uint32_t Reserved0;
	__vo uint32_t APB1RSTR;
	__vo uint32_t APB2RSTR;
	__vo uint32_t Reserved1;
	__vo uint32_t Reserved2;
	__vo uint32_t AHB1ENR;
	__vo uint32_t AHB2ENR;
	__vo uint32_t AHB3ENR;
	__vo uint32_t Reserved3;
	__vo uint32_t APB1ENR;
	__vo uint32_t APB2ENR;
	__vo uint32_t Reserved4;
	__vo uint32_t Reserved5;
	__vo uint32_t AHB1LPENR;
	__vo uint32_t AHB2LPENR;
	__vo uint32_t AHB3LPENR;
	__vo uint32_t Reserved6;
	__vo uint32_t APB1LPENR;
	__vo uint32_t APB2LPENR;
	__vo uint32_t Reserved7;
	__vo uint32_t Reserved8;
	__vo uint32_t BDCR;
	__vo uint32_t CSR;
	__vo uint32_t Reserved9;
	__vo uint32_t Reserved10;
	__vo uint32_t SSCGR;
	__vo uint32_t PLLLI2SCFGR;
	__vo uint32_t PLLSAICFGR;
	__vo uint32_t DCKCFGR;


}RCC_RegDef_t;


/* GPIO Definition*/

#define GPIOA									((GPIO_RegDef_t *)GPIOA_BASEADDR)
#define GPIOB									((GPIO_RegDef_t *)GPIOB_BASEADDR)
#define GPIOC									((GPIO_RegDef_t *)GPIOC_BASEADDR)
#define GPIOD									((GPIO_RegDef_t *)GPIOD_BASEADDR)
#define GPIOE									((GPIO_RegDef_t *)GPIOE_BASEADDR)
#define GPIOF									((GPIO_RegDef_t *)GPIOF_BASEADDR)
#define GPIOG									((GPIO_RegDef_t *)GPIOG_BASEADDR)
#define GPIOH									((GPIO_RegDef_t *)GPIOH_BASEADDR)
#define GPIOI									((GPIO_RegDef_t *)GPIOI_BASEADDR)

/*RCC Definition*/
#define RCC										((RCC_RegDef_t *)RCC_BASEADDR)

/*
 * Clock Enable Macro GPIOx
 */
#define	GIOA_PCLK_EN()				(RCC->AHB1ENR |= (1 << 0))	//GPIOA Enable
#define	GIOB_PCLK_EN()				(RCC->AHB1ENR |= (1 << 1))	//GPIOB Enable
#define	GIOC_PCLK_EN()				(RCC->AHB1ENR |= (1 << 2))	//GPIOC Enable
#define	GIOD_PCLK_EN()				(RCC->AHB1ENR |= (1 << 3))	//GPIOD Enable
#define	GIOE_PCLK_EN()				(RCC->AHB1ENR |= (1 << 4))	//GPIOE Enable
#define	GIOF_PCLK_EN()				(RCC->AHB1ENR |= (1 << 5))	//GPIOF Enable
#define	GIOG_PCLK_EN()				(RCC->AHB1ENR |= (1 << 6))	//GPIOG Enable
#define	GIOH_PCLK_EN()				(RCC->AHB1ENR |= (1 << 7))	//GPIOH Enable
#define	GIOI_PCLK_EN()				(RCC->AHB1ENR |= (1 << 8))	//GPIOI Enable


/*
 * Clock Disable Macro GPIOx
 */
#define	GIOA_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 0))	//GPIOA Disable
#define	GIOB_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 1))	//GPIOB Disable
#define	GIOC_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 2))	//GPIOC Disable
#define	GIOD_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 3))	//GPIOD Disable
#define	GIOE_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 4))	//GPIOE Disable
#define	GIOF_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 5))	//GPIOF Disable
#define	GIOG_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 6))	//GPIOG Disable
#define	GIOH_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 7))	//GPIOH Disable
#define	GIOI_PCLK_DI()				(RCC->AHB1ENR &= ~(1 << 8))	//GPIOI Disable

/*
 * Clock Enable I2C Peripheral Enable
 */
#define	I2C1_PCLK_EN()				(RCC->APB1ENR |= (1<<21))
#define	I2C2_PCLK_EN()				(RCC->APB1ENR |= (1<<22))
#define	I2C3_PCLK_EN()				(RCC->APB1ENR |= (1<<23))

/*
 * Clock Disable I2C Peripheral Enable
 */
#define	I2C1_PCLK_DI()				(RCC->APB1ENR &= ~(1<<21))
#define	I2C2_PCLK_DI()				(RCC->APB1ENR &= ~(1<<22))
#define	I2C3_PCLK_DI()				(RCC->APB1ENR &= ~(1<<23))


/*
 * Clock Enable SPI Peripheral Enable
 */
#define	SPI1_PCLK_EN()				(RCC->APB2ENR |= (1<<12))
#define	SPI2_PCLK_EN()				(RCC->APB1ENR |= (1<<14))
#define	SPI3_PCLK_EN()				(RCC->APB1ENR |= (1<<15))
#define	SPI4_PCLK_EN()				(RCC->APB2ENR |= (1<<13))
/*
 * Clock Disable SPI Peripheral Enable
 */
#define	SPI1_PCLK_DI()				(RCC->APB2ENR &= ~(1<<12))
#define	SPI2_PCLK_DI()				(RCC->APB1ENR &= ~(1<<14))
#define	SPI3_PCLK_DI()				(RCC->APB1ENR &= ~(1<<15))
#define	SPI4_PCLK_DI()				(RCC->APB2ENR &= ~(1<<13))

/*
 * Clock Enable USART
 */
#define	USART1_PCLK_EN()			(RCC->APB2ENR |= (1<<4))
#define	USART2_PCLK_EN()			(RCC->APB1ENR |= (1<<17))
#define	USART3_PCLK_EN()			(RCC->APB1ENR |= (1<<18))
#define UART4_PCLK_EN()				(RCC->APB1ENR |= (1<<19))
#define UART5_PCLK_EN()				(RCC->APB1ENR |= (1<<20))
#define USART6_PCLK_EN()			(RCC->APB2ENR |= (1<<5))

/*
 * Clock Disable USART
 */
#define	USART1_PCLK_DI()			(RCC->APB2ENR &= ~(1<<4))
#define	USART2_PCLK_DI()			(RCC->APB1ENR &= ~(1<<17))
#define	USART3_PCLK_DI()			(RCC->APB1ENR &= ~(1<<18))
#define UART4_PCLK_DI()				(RCC->APB1ENR &= ~(1<<19))
#define UART5_PCLK_DI()				(RCC->APB1ENR &= ~(1<<20))
#define USART6_PCLK_DI()			(RCC->APB2ENR &= ~(1<<5))


/*
 * Clock Enable SYSCLK
 */
#define SYSCFG_PCLK_EN()			(RCC->APB2ENR |= (1<<14))

/*
 * Clock Disable SYSCLK
 */
#define SYSCFG_PCLK_DI()			(RCC->APB2ENR &= ~(1<<14))





#endif /* INC_STM32F407XX_H_ */
