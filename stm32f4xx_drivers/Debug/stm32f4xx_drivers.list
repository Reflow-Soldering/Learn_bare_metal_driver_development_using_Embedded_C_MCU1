
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a0c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b94  08000b94  00001b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ba0  08000ba0  00001bb0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ba0  08000ba0  00001ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ba8  08000bb0  00001bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba8  08000ba8  00001ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bac  08000bac  00001bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001bb0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000128a  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e5  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00003350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f0  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023b0  00000000  00000000  00003590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c20  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000950e  00000000  00000000  00007560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010a6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000049c  00000000  00000000  00010ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00010f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b7c 	.word	0x08000b7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b7c 	.word	0x08000b7c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:
//PB12 - SPI2_NSS
//ALT - Number 5


void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i< 500000*2; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	000f423f 	.word	0x000f423f

08000204 <SPI2_GPIOInit>:

/*
 * SPI2 초기화 함수
 */
void SPI2_GPIOInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	//GPIOB의 핀 설정을 진행한것
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <SPI2_GPIOInit+0x4c>)
 800020c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_AltFunMode = 5;
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = OUTPUT_OP_TYPE_PUSH_PULL;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PP_PD;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = OUTPUT_SPD_HIGH;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	//SCLK 설정
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f98d 	bl	8000548 <GPIO_Init>

	//MOSI 설정
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f987 	bl	8000548 <GPIO_Init>
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
//	GPIO_Init(&SPIPins);

	//NSS 설정
	//아두이노 슬레이브 사용
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800023a:	230c      	movs	r3, #12
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f981 	bl	8000548 <GPIO_Init>



}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020400 	.word	0x40020400

08000254 <SPI2_Init>:

void SPI2_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800025a:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <SPI2_Init+0x38>)
 800025c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL;
 800025e:	2301      	movs	r3, #1
 8000260:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_PinConfig.SPI_SclkSpeed = SPI_SCLK_DIV_8;
 8000266:	2302      	movs	r3, #2
 8000268:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_PinConfig.SPI_DFF = SPI_DFF_8BIT;
 800026a:	2300      	movs	r3, #0
 800026c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPI_PinConfig.SPI_SSM = SPI_SSM_DI;		//아두이노 통신하므로
 8000276:	2300      	movs	r3, #0
 8000278:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fb83 	bl	8000988 <SPI_Init>


}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40003800 	.word	0x40003800

08000290 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	//버튼을 누르면 LED가 켜지고 떼면 꺼짐

	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOA;
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <GPIO_ButtonInit+0x2c>)
 8000298:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800029a:	2300      	movs	r3, #0
 800029c:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 800029e:	2300      	movs	r3, #0
 80002a0:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = OUTPUT_SPD_VERY_HIGH;
 80002a2:	2303      	movs	r3, #3
 80002a4:	72bb      	strb	r3, [r7, #10]
//	GpioButton.GPIO_PinConfig.GPIO_PinOPType = OUTPUT_OP_TYPE_PUSH_PULL; // 사용 안함
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PP_PD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioButton);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f94b 	bl	8000548 <GPIO_Init>
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000

080002c0 <main>:

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
	 * 1. SPI를 사용할 GPIO 그룹의 클럭 인에이블
	 * 2. SPI를 사용할 핀의 레지스터 설정
	 * 3. SPI를 사용할 모드 설정
	 */

	uint8_t user_data[] = "Hello World";
 80002c6:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <main+0x88>)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80002cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 80002d0:	f7ff ffde 	bl	8000290 <GPIO_ButtonInit>
//	GPIO_PeriClockControl(GPIOB,ENABLE);
	SPI2_GPIOInit();		//내부에 GPIO CLOCK ENABLE 있음
 80002d4:	f7ff ff96 	bl	8000204 <SPI2_GPIOInit>

	//SPI2 사용을 위한 기능 설정 init
	SPI2_Init();		//SPI_Init 내부에 peripheral 인에이블 함수 있음!!
 80002d8:	f7ff ffbc 	bl	8000254 <SPI2_Init>
	 * SSOE 1이면 NSS 출력이 인에이블
	 * NSS핀 자동으로 변경
	 * SPE=1이면, NSS자동으로 LOW
	 * SPE=0이면 NSS 자동으로 HIGH변경
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	481b      	ldr	r0, [pc, #108]	@ (800034c <main+0x8c>)
 80002e0:	f000 fc0d 	bl	8000afe <SPI_SSOEConfig>
	while(1)
	{

		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 80002e4:	bf00      	nop
 80002e6:	2100      	movs	r1, #0
 80002e8:	4819      	ldr	r0, [pc, #100]	@ (8000350 <main+0x90>)
 80002ea:	f000 fac7 	bl	800087c <GPIO_ReadFromInputPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f8      	beq.n	80002e6 <main+0x26>

		delay();
 80002f4:	f7ff ff70 	bl	80001d8 <delay>

		//SPI2 peri enable 필수
		SPI_PeripheralControl(SPI2, ENABLE);
 80002f8:	2101      	movs	r1, #1
 80002fa:	4814      	ldr	r0, [pc, #80]	@ (800034c <main+0x8c>)
 80002fc:	f000 fbe4 	bl	8000ac8 <SPI_PeripheralControl>

		//first send length info
		uint8_t dataLen = strlen(user_data);
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff60 	bl	80001c8 <strlen>
 8000308:	4603      	mov	r3, r0
 800030a:	b2db      	uxtb	r3, r3
 800030c:	70fb      	strb	r3, [r7, #3]
//		SPI2->CR1 |= 1<<SPI_CR1_SPE;
		SPI_SendData(SPI2,&dataLen,1);
 800030e:	1cfb      	adds	r3, r7, #3
 8000310:	2201      	movs	r2, #1
 8000312:	4619      	mov	r1, r3
 8000314:	480d      	ldr	r0, [pc, #52]	@ (800034c <main+0x8c>)
 8000316:	f000 fba0 	bl	8000a5a <SPI_SendData>

		SPI_SendData(SPI2,(uint8_t *)user_data,strlen(user_data));
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff53 	bl	80001c8 <strlen>
 8000322:	4602      	mov	r2, r0
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	4808      	ldr	r0, [pc, #32]	@ (800034c <main+0x8c>)
 800032a:	f000 fb96 	bl	8000a5a <SPI_SendData>

		//SPI가 busy인지 확인
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG)==SET);		//1을 줄 때까지 대기
 800032e:	bf00      	nop
 8000330:	2180      	movs	r1, #128	@ 0x80
 8000332:	4806      	ldr	r0, [pc, #24]	@ (800034c <main+0x8c>)
 8000334:	f000 fb7e 	bl	8000a34 <SPI_GetFlagStatus>
 8000338:	4603      	mov	r3, r0
 800033a:	2b01      	cmp	r3, #1
 800033c:	d0f8      	beq.n	8000330 <main+0x70>

		//disable SPI2
		SPI_PeripheralControl(SPI2, DISABLE);
 800033e:	2100      	movs	r1, #0
 8000340:	4802      	ldr	r0, [pc, #8]	@ (800034c <main+0x8c>)
 8000342:	f000 fbc1 	bl	8000ac8 <SPI_PeripheralControl>
	{
 8000346:	e7cd      	b.n	80002e4 <main+0x24>
 8000348:	08000b94 	.word	0x08000b94
 800034c:	40003800 	.word	0x40003800
 8000350:	40020000 	.word	0x40020000

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	@ (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	@ (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 fbd7 	bl	8000b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff9b 	bl	80002c0 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000bb0 	.word	0x08000bb0
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <GPIO_PeriClockControl>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	//GPIO Peripheral Clock Enable
	//GPIO 주변장치 클럭 연결
	if(EnorDi == ENABLE)
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d157      	bne.n	800046a <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a59      	ldr	r2, [pc, #356]	@ (8000524 <GPIO_PeriClockControl+0x17c>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003c2:	4b59      	ldr	r3, [pc, #356]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a58      	ldr	r2, [pc, #352]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
//		else if(pGPIOx == GPIOI)
//		{
//			GPIOI_PCLK_DI();
//		}
	}
}
 80003ce:	e0a3      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a56      	ldr	r2, [pc, #344]	@ (800052c <GPIO_PeriClockControl+0x184>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d8:	4b53      	ldr	r3, [pc, #332]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a52      	ldr	r2, [pc, #328]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e4:	e098      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a51      	ldr	r2, [pc, #324]	@ (8000530 <GPIO_PeriClockControl+0x188>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fa:	e08d      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000534 <GPIO_PeriClockControl+0x18c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000404:	4b48      	ldr	r3, [pc, #288]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a47      	ldr	r2, [pc, #284]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	e082      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a48      	ldr	r2, [pc, #288]	@ (8000538 <GPIO_PeriClockControl+0x190>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041a:	4b43      	ldr	r3, [pc, #268]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	4a42      	ldr	r2, [pc, #264]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000426:	e077      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a44      	ldr	r2, [pc, #272]	@ (800053c <GPIO_PeriClockControl+0x194>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000430:	4b3d      	ldr	r3, [pc, #244]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a3c      	ldr	r2, [pc, #240]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043c:	e06c      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a3f      	ldr	r2, [pc, #252]	@ (8000540 <GPIO_PeriClockControl+0x198>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000446:	4b38      	ldr	r3, [pc, #224]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044a:	4a37      	ldr	r2, [pc, #220]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800044c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000450:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000452:	e061      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a3b      	ldr	r2, [pc, #236]	@ (8000544 <GPIO_PeriClockControl+0x19c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d15d      	bne.n	8000518 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800045c:	4b32      	ldr	r3, [pc, #200]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000460:	4a31      	ldr	r2, [pc, #196]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000466:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000468:	e056      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a2d      	ldr	r2, [pc, #180]	@ (8000524 <GPIO_PeriClockControl+0x17c>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000472:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a2c      	ldr	r2, [pc, #176]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047e:	e04b      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a2a      	ldr	r2, [pc, #168]	@ (800052c <GPIO_PeriClockControl+0x184>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000488:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a26      	ldr	r2, [pc, #152]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800048e:	f023 0302 	bic.w	r3, r3, #2
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000494:	e040      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a25      	ldr	r2, [pc, #148]	@ (8000530 <GPIO_PeriClockControl+0x188>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800049e:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	4a21      	ldr	r2, [pc, #132]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004a4:	f023 0304 	bic.w	r3, r3, #4
 80004a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004aa:	e035      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a21      	ldr	r2, [pc, #132]	@ (8000534 <GPIO_PeriClockControl+0x18c>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80004b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004ba:	f023 0308 	bic.w	r3, r3, #8
 80004be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c0:	e02a      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000538 <GPIO_PeriClockControl+0x190>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004d0:	f023 0310 	bic.w	r3, r3, #16
 80004d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d6:	e01f      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a18      	ldr	r2, [pc, #96]	@ (800053c <GPIO_PeriClockControl+0x194>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a10      	ldr	r2, [pc, #64]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004e6:	f023 0320 	bic.w	r3, r3, #32
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ec:	e014      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <GPIO_PeriClockControl+0x198>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000502:	e009      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a0f      	ldr	r2, [pc, #60]	@ (8000544 <GPIO_PeriClockControl+0x19c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d105      	bne.n	8000518 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000516:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40020000 	.word	0x40020000
 8000528:	40023800 	.word	0x40023800
 800052c:	40020400 	.word	0x40020400
 8000530:	40020800 	.word	0x40020800
 8000534:	40020c00 	.word	0x40020c00
 8000538:	40021000 	.word	0x40021000
 800053c:	40021400 	.word	0x40021400
 8000540:	40021800 	.word	0x40021800
 8000544:	40021c00 	.word	0x40021c00

08000548 <GPIO_Init>:
 *
 * @추가 내용					-	None
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandles)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
		1101: AF13
		1110: AF14
		1111: AF15
	 *
	 */
	uint32_t temp = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]

	//GPIO 그룹 핀 인에이블을 여기서 진행하면 계속 할 필요 없음
	GPIO_PeriClockControl(pGPIOHandles->pGPIOx, ENABLE);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff24 	bl	80003a8 <GPIO_PeriClockControl>

	//1번 설정 - 인터럽트 제외 코드 작성
	if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	2b03      	cmp	r3, #3
 8000566:	d81f      	bhi.n	80005a8 <GPIO_Init+0x60>
	{
		//GPIO핀 모드가 인터럽트 모드보다 작을때 -> 인터럽트 모드는 4부터 시작
		//GPIO핀마다 2비트 사용하므로 핀 번호의 2배만큼 시프트
		//ex) 1번핀 -> 1 * 2 >>> 레지스터 2비트 부터 시작
		//    10번핀 -> 10 * 2 >>> 레지스터 20비트 부터 시작 21번 비트까지
		temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	617b      	str	r3, [r7, #20]

		//이후 temp 값을 레지스터에 저장한다
		//GPIO_Handle_t 구조체는 GPIO_RegDef_t *pGPIOx와 GPIO_PinConfig_t GPIO_PinConfig 모두 가지고 있는 구조체임
		pGPIOHandles->pGPIOx->MODER &= ~(0x03 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber); //비트 클리어
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	4619      	mov	r1, r3
 8000586:	2303      	movs	r3, #3
 8000588:	408b      	lsls	r3, r1
 800058a:	43db      	mvns	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	400a      	ands	r2, r1
 8000594:	601a      	str	r2, [r3, #0]
		pGPIOHandles->pGPIOx->MODER |= temp;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	e0c2      	b.n	800072e <GPIO_Init+0x1e6>

	}
	else
	{
		if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_INT_FT)		//Falling Edge 일 때
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d817      	bhi.n	80005e0 <GPIO_Init+0x98>
		{
			//Falling Edge 레지스터 규정
			EXTI->FTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	4b47      	ldr	r3, [pc, #284]	@ (80006d0 <GPIO_Init+0x188>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a43      	ldr	r2, [pc, #268]	@ (80006d0 <GPIO_Init+0x188>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	60d3      	str	r3, [r2, #12]
			//어떠한 이유로 인해 Rising Edge가 규정되어 있으수도 있으므로 클리어
			EXTI->RTSR &= ~(1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 80005c6:	4b42      	ldr	r3, [pc, #264]	@ (80006d0 <GPIO_Init+0x188>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7912      	ldrb	r2, [r2, #4]
 80005ce:	4611      	mov	r1, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	408a      	lsls	r2, r1
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a3d      	ldr	r2, [pc, #244]	@ (80006d0 <GPIO_Init+0x188>)
 80005da:	400b      	ands	r3, r1
 80005dc:	6093      	str	r3, [r2, #8]
 80005de:	e035      	b.n	800064c <GPIO_Init+0x104>
		}
		else if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_INT_RT)		//Rising Edge 일 때
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d817      	bhi.n	8000618 <GPIO_Init+0xd0>
		{
			//Rising Edge 레지스터 규정
			EXTI->RTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 80005e8:	4b39      	ldr	r3, [pc, #228]	@ (80006d0 <GPIO_Init+0x188>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	4611      	mov	r1, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	408a      	lsls	r2, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a35      	ldr	r2, [pc, #212]	@ (80006d0 <GPIO_Init+0x188>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6093      	str	r3, [r2, #8]
			//어떠한 이유로 인해 Rising Edge가 규정되어 있으수도 있으므로 클리어
			EXTI->FTSR &= ~(1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 80005fe:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <GPIO_Init+0x188>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7912      	ldrb	r2, [r2, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	43d2      	mvns	r2, r2
 800060e:	4611      	mov	r1, r2
 8000610:	4a2f      	ldr	r2, [pc, #188]	@ (80006d0 <GPIO_Init+0x188>)
 8000612:	400b      	ands	r3, r1
 8000614:	60d3      	str	r3, [r2, #12]
 8000616:	e019      	b.n	800064c <GPIO_Init+0x104>
		}
		else if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_INT_FT_RT)		//Both Edge 일 때
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d815      	bhi.n	800064c <GPIO_Init+0x104>
		{
			//양쪽 에지 사용
			EXTI->RTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000620:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <GPIO_Init+0x188>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	7912      	ldrb	r2, [r2, #4]
 8000628:	4611      	mov	r1, r2
 800062a:	2201      	movs	r2, #1
 800062c:	408a      	lsls	r2, r1
 800062e:	4611      	mov	r1, r2
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <GPIO_Init+0x188>)
 8000632:	430b      	orrs	r3, r1
 8000634:	6093      	str	r3, [r2, #8]
			//양쪽의 에지 모두 활성화 하므로
			EXTI->FTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <GPIO_Init+0x188>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7912      	ldrb	r2, [r2, #4]
 800063e:	4611      	mov	r1, r2
 8000640:	2201      	movs	r2, #1
 8000642:	408a      	lsls	r2, r1
 8000644:	4611      	mov	r1, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <GPIO_Init+0x188>)
 8000648:	430b      	orrs	r3, r1
 800064a:	60d3      	str	r3, [r2, #12]
		}

		//GPIO 보트 설정 SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber / 4);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = (pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber % 4);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandles->pGPIOx);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <GPIO_Init+0x18c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d045      	beq.n	80006f4 <GPIO_Init+0x1ac>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1a      	ldr	r2, [pc, #104]	@ (80006d8 <GPIO_Init+0x190>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d02b      	beq.n	80006ca <GPIO_Init+0x182>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <GPIO_Init+0x194>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d024      	beq.n	80006c6 <GPIO_Init+0x17e>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <GPIO_Init+0x198>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d01d      	beq.n	80006c2 <GPIO_Init+0x17a>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <GPIO_Init+0x19c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d016      	beq.n	80006be <GPIO_Init+0x176>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <GPIO_Init+0x1a0>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d00f      	beq.n	80006ba <GPIO_Init+0x172>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <GPIO_Init+0x1a4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d008      	beq.n	80006b6 <GPIO_Init+0x16e>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	@ (80006f0 <GPIO_Init+0x1a8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <GPIO_Init+0x16a>
 80006ae:	2307      	movs	r3, #7
 80006b0:	e021      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006b2:	2300      	movs	r3, #0
 80006b4:	e01f      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006b6:	2306      	movs	r3, #6
 80006b8:	e01d      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006ba:	2305      	movs	r3, #5
 80006bc:	e01b      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006be:	2304      	movs	r3, #4
 80006c0:	e019      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006c2:	2303      	movs	r3, #3
 80006c4:	e017      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006c6:	2302      	movs	r3, #2
 80006c8:	e015      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006ca:	2301      	movs	r3, #1
 80006cc:	e013      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006ce:	bf00      	nop
 80006d0:	40013c00 	.word	0x40013c00
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	2300      	movs	r3, #0
 80006f6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000870 <GPIO_Init+0x328>)
 80006fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fc:	4a5c      	ldr	r2, [pc, #368]	@ (8000870 <GPIO_Init+0x328>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 8000704:	7c7a      	ldrb	r2, [r7, #17]
 8000706:	7cbb      	ldrb	r3, [r7, #18]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	fa02 f103 	lsl.w	r1, r2, r3
 800070e:	4a59      	ldr	r2, [pc, #356]	@ (8000874 <GPIO_Init+0x32c>)
 8000710:	7cfb      	ldrb	r3, [r7, #19]
 8000712:	3302      	adds	r3, #2
 8000714:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//IMR에 전달할 exti 인에이블
		EXTI->IMR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000718:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <GPIO_Init+0x330>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	7912      	ldrb	r2, [r2, #4]
 8000720:	4611      	mov	r1, r2
 8000722:	2201      	movs	r2, #1
 8000724:	408a      	lsls	r2, r1
 8000726:	4611      	mov	r1, r2
 8000728:	4a53      	ldr	r2, [pc, #332]	@ (8000878 <GPIO_Init+0x330>)
 800072a:	430b      	orrs	r3, r1
 800072c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]

	//2번 설정 핀 속도
	temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
	pGPIOHandles->pGPIOx->OSPEEDR &= ~(0x03 <<(2* pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber)); //비트 클리어
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	2103      	movs	r1, #3
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43db      	mvns	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	400a      	ands	r2, r1
 8000760:	609a      	str	r2, [r3, #8]
	pGPIOHandles->pGPIOx->OSPEEDR |= temp;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6899      	ldr	r1, [r3, #8]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	430a      	orrs	r2, r1
 8000770:	609a      	str	r2, [r3, #8]

	temp =0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]

	//3번 설정 풀업 풀다운
	temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	79db      	ldrb	r3, [r3, #7]
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
	pGPIOHandles->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber)); //비트 클리어
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	2103      	movs	r1, #3
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	400a      	ands	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
	pGPIOHandles->pGPIOx->PUPDR |= temp;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68d9      	ldr	r1, [r3, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]

	//4번 설정 출력 타입 설정
	//16비트 설정함 r각 1비트
	temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7a1b      	ldrb	r3, [r3, #8]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	617b      	str	r3, [r7, #20]
	pGPIOHandles->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber); //비트 클리어
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2301      	movs	r3, #1
 80007d8:	408b      	lsls	r3, r1
 80007da:	43db      	mvns	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	400a      	ands	r2, r1
 80007e4:	605a      	str	r2, [r3, #4]
	pGPIOHandles->pGPIOx->OTYPER |= temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6859      	ldr	r1, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]

	//5번 ALT 기능 모드 설정
	if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	795b      	ldrb	r3, [r3, #5]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d132      	bne.n	8000868 <GPIO_Init+0x320>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber % 8;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	f003 0307 	and.w	r3, r3, #7
 8000814:	60bb      	str	r3, [r7, #8]
		pGPIOHandles->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	3208      	adds	r2, #8
 800081e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	210f      	movs	r1, #15
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	43db      	mvns	r3, r3
 800082e:	4619      	mov	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4011      	ands	r1, r2
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	3208      	adds	r2, #8
 800083a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandles->pGPIOx->AFR[temp1] |= (pGPIOHandles->GPIO_PinConfig.GPIO_AltFunMode << ( 4 * temp2 ) );
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	3208      	adds	r2, #8
 8000846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7a5b      	ldrb	r3, [r3, #9]
 800084e:	4619      	mov	r1, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	4619      	mov	r1, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4311      	orrs	r1, r2
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	3208      	adds	r2, #8
 8000864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandles->pGPIOx->AFRH |= (pGPIOHandles->GPIO_PinConfig.GPIO_AltFunMode << (4 * temp2) );
		}*/
	}


}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40013800 	.word	0x40013800
 8000878:	40013c00 	.word	0x40013c00

0800087c <GPIO_ReadFromInputPin>:
 * @반환값					-	핀 입력 High or Low (1 혹은 0)
 *
 * @추가 내용					-	None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	//지역변수 하나 사용
	uint8_t value;
	//해당 지역변수로 값을 저장하기 위해 Input Data Register(IDR)의 레지스터를 핀 수만큼
	//오른쪽으로 시프트 하고, 0x00000001을 논리 곱셈하여 값이 1인지 0인지 확인한다.
	//반드시 형 변환(type casting) 사용
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691a      	ldr	r2, [r3, #16]
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	fa22 f303 	lsr.w	r3, r2, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]
	//이후 값을 리턴한다.
	return value;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <SPI_PeriClockControl>:
 *
 * @추가 내용					-	None
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
	//각 주변장치마다 RCC에서 Enable/Disable 진행 필수
	if(EnorDi == ENABLE)
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d12b      	bne.n	8000912 <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <SPI_PeriClockControl+0xcc>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 80008c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 80008ce:	e04b      	b.n	8000968 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a2a      	ldr	r2, [pc, #168]	@ (800097c <SPI_PeriClockControl+0xd4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d106      	bne.n	80008e6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a26      	ldr	r2, [pc, #152]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008e4:	e040      	b.n	8000968 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a25      	ldr	r2, [pc, #148]	@ (8000980 <SPI_PeriClockControl+0xd8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d106      	bne.n	80008fc <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 80008f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008fa:	e035      	b.n	8000968 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a21      	ldr	r2, [pc, #132]	@ (8000984 <SPI_PeriClockControl+0xdc>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d131      	bne.n	8000968 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000904:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 8000906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 800090a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800090e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000910:	e02a      	b.n	8000968 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <SPI_PeriClockControl+0xcc>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a16      	ldr	r2, [pc, #88]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 8000920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000926:	e01f      	b.n	8000968 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a14      	ldr	r2, [pc, #80]	@ (800097c <SPI_PeriClockControl+0xd4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 8000936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800093a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800093c:	e014      	b.n	8000968 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <SPI_PeriClockControl+0xd8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a0b      	ldr	r2, [pc, #44]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 800094c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000952:	e009      	b.n	8000968 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0b      	ldr	r2, [pc, #44]	@ (8000984 <SPI_PeriClockControl+0xdc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d105      	bne.n	8000968 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000960:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SPI_PeriClockControl+0xd0>)
 8000962:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000966:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40013000 	.word	0x40013000
 8000978:	40023800 	.word	0x40023800
 800097c:	40003800 	.word	0x40003800
 8000980:	40003c00 	.word	0x40003c00
 8000984:	40013400 	.word	0x40013400

08000988 <SPI_Init>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void SPI_Init(SPI_Handle_t *pSPIHandles)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]

	//SPI 클럭 인에이블 - 여기다 써두면 초기화 할 떄 사용 가능
	SPI_PeriClockControl(pSPIHandles->pSPIx, ENABLE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff84 	bl	80008a8 <SPI_PeriClockControl>


	//1. 디바이스 모드 설정
	tempreg |= (pSPIHandles->SPI_PinConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	791b      	ldrb	r3, [r3, #4]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

	//2. 통신방식 설정
	if(pSPIHandles->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	795b      	ldrb	r3, [r3, #5]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d104      	bne.n	80009be <SPI_Init+0x36>
	{
		//BIDIMODE 0이어야함
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e014      	b.n	80009e8 <SPI_Init+0x60>
	}
	else if(pSPIHandles->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	795b      	ldrb	r3, [r3, #5]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d104      	bne.n	80009d0 <SPI_Init+0x48>
	{
		//BIDIMODE 1이어야함
		tempreg |= (1<<SPI_CR1_BIDIMODE);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e00b      	b.n	80009e8 <SPI_Init+0x60>
	}
	else if(pSPIHandles->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_RXONLY)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	795b      	ldrb	r3, [r3, #5]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d107      	bne.n	80009e8 <SPI_Init+0x60>
	{
		//BIDIMODE 0이고 RXONLY가 1이어야함
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009de:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<SPI_CR1_RXONLY);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009e6:	60fb      	str	r3, [r7, #12]
	}

	//3. 클럭 스피트 설정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	799b      	ldrb	r3, [r3, #6]
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

	//4. 데이터 포맷 결정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_DFF << SPI_CR1_DFF;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	79db      	ldrb	r3, [r3, #7]
 80009f8:	02db      	lsls	r3, r3, #11
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

	//5. 클럭 극성 결정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7a1b      	ldrb	r3, [r3, #8]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	//6. 클럭 에지 결정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7a5b      	ldrb	r3, [r3, #9]
 8000a10:	461a      	mov	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandles->SPI_PinConfig.SPI_SSM << SPI_CR1_SSM;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7a9b      	ldrb	r3, [r3, #10]
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

	//레지스터 저장
	pSPIHandles->pSPIx->CR1 = tempreg;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SPI_GetFlagStatus>:
		SPI4_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
//	if(pSPIx->SR & FlagName)
	if((pSPIx->SR & FlagName))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <SPI_SendData>:
 * @추가 내용					-	폴링 방식 코드. 모든 데이터를 보낼 때까지 다른것이 간섭 불가
 */

//폴링방식
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Len)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a66:	e027      	b.n	8000ab8 <SPI_SendData+0x5e>
	{
		// 1. TXE가 1인지 계속 확인한다.
//		while((pSPIx->SR & (1<<1)) == 0);
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000a68:	bf00      	nop
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff ffe1 	bl	8000a34 <SPI_GetFlagStatus>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f8      	beq.n	8000a6a <SPI_SendData+0x10>

		// 2. CR1의 DFF 비트 확인
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00e      	beq.n	8000aa2 <SPI_SendData+0x48>
		{
			//16비트 설정 시
			//1. DR에서 데이터 불러오기
			pSPIx->DR = *((uint16_t *)pTXBuffer);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	60da      	str	r2, [r3, #12]
			Len--;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
			Len--;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTXBuffer++;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	e00a      	b.n	8000ab8 <SPI_SendData+0x5e>
		}
		else
		{
			pSPIx->DR = *pTXBuffer;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	60da      	str	r2, [r3, #12]
			Len--;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
			pTXBuffer++;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1d4      	bne.n	8000a68 <SPI_SendData+0xe>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SPI_PeripheralControl>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d106      	bne.n	8000ae8 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ae6:	e005      	b.n	8000af4 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <SPI_SSOEConfig>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d106      	bne.n	8000b1e <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f043 0204 	orr.w	r2, r3, #4
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 8000b1c:	e005      	b.n	8000b2a <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f023 0204 	bic.w	r2, r3, #4
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	605a      	str	r2, [r3, #4]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <__libc_init_array>:
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	4d0d      	ldr	r5, [pc, #52]	@ (8000b6c <__libc_init_array+0x38>)
 8000b38:	4c0d      	ldr	r4, [pc, #52]	@ (8000b70 <__libc_init_array+0x3c>)
 8000b3a:	1b64      	subs	r4, r4, r5
 8000b3c:	10a4      	asrs	r4, r4, #2
 8000b3e:	2600      	movs	r6, #0
 8000b40:	42a6      	cmp	r6, r4
 8000b42:	d109      	bne.n	8000b58 <__libc_init_array+0x24>
 8000b44:	4d0b      	ldr	r5, [pc, #44]	@ (8000b74 <__libc_init_array+0x40>)
 8000b46:	4c0c      	ldr	r4, [pc, #48]	@ (8000b78 <__libc_init_array+0x44>)
 8000b48:	f000 f818 	bl	8000b7c <_init>
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	2600      	movs	r6, #0
 8000b52:	42a6      	cmp	r6, r4
 8000b54:	d105      	bne.n	8000b62 <__libc_init_array+0x2e>
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
 8000b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5c:	4798      	blx	r3
 8000b5e:	3601      	adds	r6, #1
 8000b60:	e7ee      	b.n	8000b40 <__libc_init_array+0xc>
 8000b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b66:	4798      	blx	r3
 8000b68:	3601      	adds	r6, #1
 8000b6a:	e7f2      	b.n	8000b52 <__libc_init_array+0x1e>
 8000b6c:	08000ba8 	.word	0x08000ba8
 8000b70:	08000ba8 	.word	0x08000ba8
 8000b74:	08000ba8 	.word	0x08000ba8
 8000b78:	08000bac 	.word	0x08000bac

08000b7c <_init>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr

08000b88 <_fini>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	bf00      	nop
 8000b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8e:	bc08      	pop	{r3}
 8000b90:	469e      	mov	lr, r3
 8000b92:	4770      	bx	lr
