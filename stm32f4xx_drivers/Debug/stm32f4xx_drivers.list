
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001f20  08001f20  00002f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f78  08001f78  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001f78  08001f78  00002f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f80  08001f80  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f80  08001f80  00002f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f84  08001f84  00002f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001f88  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001bac  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007b8  00000000  00000000  00004c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  000053f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000182  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035b2  00000000  00000000  00005792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002bbc  00000000  00000000  00008d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bd55  00000000  00000000  0000b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00017655  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f4c  00000000  00000000  00017698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  000185e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f08 	.word	0x08001f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001f08 	.word	0x08001f08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:


#define LED_PIN_9								9

void delay(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i< 500000*2; i++);
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e002      	b.n	8000292 <delay+0x12>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <delay+0x28>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d9f8      	bls.n	800028c <delay+0xc>
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	000f423f 	.word	0x000f423f

080002ac <SPI2_GPIOInit>:

/*
 * SPI2 초기화 함수
 */
void SPI2_GPIOInit(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
	//GPIOB의 핀 설정을 진행한것
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002b2:	4b14      	ldr	r3, [pc, #80]	@ (8000304 <SPI2_GPIOInit+0x58>)
 80002b4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002b6:	2302      	movs	r3, #2
 80002b8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_AltFunMode = 5;
 80002ba:	2305      	movs	r3, #5
 80002bc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = OUTPUT_OP_TYPE_PUSH_PULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PP_PD;
 80002c2:	2300      	movs	r3, #0
 80002c4:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = OUTPUT_SPD_VERY_HIGH;
 80002c6:	2303      	movs	r3, #3
 80002c8:	72bb      	strb	r3, [r7, #10]

	//SCLK 설정
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002ca:	230d      	movs	r3, #13
 80002cc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fbcf 	bl	8000a74 <GPIO_Init>

	//MOSI 설정
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80002d6:	230f      	movs	r3, #15
 80002d8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fbc9 	bl	8000a74 <GPIO_Init>

	//MISO 설정
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80002e2:	230e      	movs	r3, #14
 80002e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fbc3 	bl	8000a74 <GPIO_Init>

	//NSS 설정
	//아두이노 슬레이브 사용
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80002ee:	230c      	movs	r3, #12
 80002f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fbbd 	bl	8000a74 <GPIO_Init>



}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40020400 	.word	0x40020400

08000308 <SPI2_Init>:

void SPI2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <SPI2_Init+0x38>)
 8000310:	607b      	str	r3, [r7, #4]
	SPI2handle.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL;
 8000312:	2301      	movs	r3, #1
 8000314:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000316:	2301      	movs	r3, #1
 8000318:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_PinConfig.SPI_SclkSpeed = SPI_SCLK_DIV_8;
 800031a:	2302      	movs	r3, #2
 800031c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_PinConfig.SPI_DFF = SPI_DFF_8BIT;
 800031e:	2300      	movs	r3, #0
 8000320:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000322:	2300      	movs	r3, #0
 8000324:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000326:	2300      	movs	r3, #0
 8000328:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPI_PinConfig.SPI_SSM = SPI_SSM_DI;		//아두이노 통신하므로
 800032a:	2300      	movs	r3, #0
 800032c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fdd5 	bl	8000ee0 <SPI_Init>


}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40003800 	.word	0x40003800

08000344 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
	//버튼을 누르면 LED가 켜지고 떼면 꺼짐

	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOA;
 800034a:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <GPIO_ButtonInit+0x2c>)
 800034c:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800034e:	2300      	movs	r3, #0
 8000350:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000352:	2300      	movs	r3, #0
 8000354:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = OUTPUT_SPD_VERY_HIGH;
 8000356:	2303      	movs	r3, #3
 8000358:	72bb      	strb	r3, [r7, #10]
//	GpioButton.GPIO_PinConfig.GPIO_PinOPType = OUTPUT_OP_TYPE_PUSH_PULL; // 사용 안함
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PP_PD;
 800035a:	2300      	movs	r3, #0
 800035c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioButton);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fb87 	bl	8000a74 <GPIO_Init>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40020000 	.word	0x40020000

08000374 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t AckByte)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	if(AckByte == 0xF5)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2bf5      	cmp	r3, #245	@ 0xf5
 8000382:	d101      	bne.n	8000388 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 8000384:	2301      	movs	r3, #1
 8000386:	e000      	b.n	800038a <SPI_VerifyResponse+0x16>
	}
	else
	{
		//nack
		return 0;
 8000388:	2300      	movs	r3, #0
	}
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <main>:

int main(void)
{
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b08d      	sub	sp, #52	@ 0x34
 8000398:	af00      	add	r7, sp, #0
	 * 1. SPI를 사용할 GPIO 그룹의 클럭 인에이블
	 * 2. SPI를 사용할 핀의 레지스터 설정
	 * 3. SPI를 사용할 모드 설정
	 */

	uint8_t dummy_write = 0xff;
 800039a:	23ff      	movs	r3, #255	@ 0xff
 800039c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t dummy_read;
	GPIO_ButtonInit();
 80003a0:	f7ff ffd0 	bl	8000344 <GPIO_ButtonInit>
//	GPIO_PeriClockControl(GPIOB,ENABLE);
	SPI2_GPIOInit();		//내부에 GPIO CLOCK ENABLE 있음
 80003a4:	f7ff ff82 	bl	80002ac <SPI2_GPIOInit>

	//SPI2 사용을 위한 기능 설정 init
	SPI2_Init();		//SPI_Init 내부에 peripheral 인에이블 함수 있음!!
 80003a8:	f7ff ffae 	bl	8000308 <SPI2_Init>
	 * SSOE 1이면 NSS 출력이 인에이블
	 * NSS핀 자동으로 변경
	 * SPE=1이면, NSS자동으로 LOW
	 * SPE=0이면 NSS 자동으로 HIGH변경
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 80003ac:	2101      	movs	r1, #1
 80003ae:	48c6      	ldr	r0, [pc, #792]	@ (80006c8 <main+0x334>)
 80003b0:	f000 fe67 	bl	8001082 <SPI_SSOEConfig>


		/*
		 * LED 온오프 기능 ************************************************************
		 */
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 80003b4:	bf00      	nop
 80003b6:	2100      	movs	r1, #0
 80003b8:	48c4      	ldr	r0, [pc, #784]	@ (80006cc <main+0x338>)
 80003ba:	f000 fd0b 	bl	8000dd4 <GPIO_ReadFromInputPin>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0f8      	beq.n	80003b6 <main+0x22>

		delay();
 80003c4:	f7ff ff5c 	bl	8000280 <delay>

		//SPI2 peri enable 필수
		SPI_PeriClockControl(SPI2, ENABLE);
 80003c8:	2101      	movs	r1, #1
 80003ca:	48bf      	ldr	r0, [pc, #764]	@ (80006c8 <main+0x334>)
 80003cc:	f000 fd18 	bl	8000e00 <SPI_PeriClockControl>

		//CMD_LED_CTRL
		uint8_t commandcode = COMMAND_LED_CTRL;
 80003d0:	2350      	movs	r3, #80	@ 0x50
 80003d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		uint8_t args[2];



		//1.아두이노에 명령어 전송
		SPI_SendData(SPI2, &commandcode, 1);
 80003d6:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	48ba      	ldr	r0, [pc, #744]	@ (80006c8 <main+0x334>)
 80003e0:	f000 fde1 	bl	8000fa6 <SPI_SendData>

		//1-1 MISO로 들어온 RX 데이터를 읽어 삭제한다
		//더미 데이터 읽기
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003e4:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 80003e8:	2201      	movs	r2, #1
 80003ea:	4619      	mov	r1, r3
 80003ec:	48b6      	ldr	r0, [pc, #728]	@ (80006c8 <main+0x334>)
 80003ee:	f000 fe11 	bl	8001014 <SPI_ReceiveData>

		//2.아두이노에 데이터 잘 받았는지 수신하기 위한 더미데이터 전송
		SPI_SendData(SPI2, &dummy_write, 1);
 80003f2:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80003f6:	2201      	movs	r2, #1
 80003f8:	4619      	mov	r1, r3
 80003fa:	48b3      	ldr	r0, [pc, #716]	@ (80006c8 <main+0x334>)
 80003fc:	f000 fdd3 	bl	8000fa6 <SPI_SendData>

		//LSB to MSB 데이터가 ack인지 확인하기 위한 리시브
		//이 경우는 SPI의 rxbuffer로 저장되므로, rxbuffer에서 ackbyte로 가야 한다.
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000404:	2201      	movs	r2, #1
 8000406:	4619      	mov	r1, r3
 8000408:	48af      	ldr	r0, [pc, #700]	@ (80006c8 <main+0x334>)
 800040a:	f000 fe03 	bl	8001014 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 800040e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ffae 	bl	8000374 <SPI_VerifyResponse>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00c      	beq.n	8000438 <main+0xa4>
		{
			//send arguments
			args[0] = LED_PIN_9;
 800041e:	2309      	movs	r3, #9
 8000420:	f887 3020 	strb.w	r3, [r7, #32]
			args[1] = LED_ON;
 8000424:	2301      	movs	r3, #1
 8000426:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			SPI_SendData(SPI2, args, 2);
 800042a:	f107 0320 	add.w	r3, r7, #32
 800042e:	2202      	movs	r2, #2
 8000430:	4619      	mov	r1, r3
 8000432:	48a5      	ldr	r0, [pc, #660]	@ (80006c8 <main+0x334>)
 8000434:	f000 fdb7 	bl	8000fa6 <SPI_SendData>
		}

		/*
		 *  아날로그 핀 값 읽어오기************************************************
		 */
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000438:	bf00      	nop
 800043a:	2100      	movs	r1, #0
 800043c:	48a3      	ldr	r0, [pc, #652]	@ (80006cc <main+0x338>)
 800043e:	f000 fcc9 	bl	8000dd4 <GPIO_ReadFromInputPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f8      	beq.n	800043a <main+0xa6>

		delay();
 8000448:	f7ff ff1a 	bl	8000280 <delay>

		//SPI2 peri enable 필수이나 첫 번째에서 진행 완료
//		SPI_PeriClockControl(SPI2, ENABLE);

		//센서 리드 명령어
		commandcode = COMMAND_SENSOR_READ;
 800044c:	2351      	movs	r3, #81	@ 0x51
 800044e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		SPI_SendData(SPI2, &commandcode, 1);
 8000452:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8000456:	2201      	movs	r2, #1
 8000458:	4619      	mov	r1, r3
 800045a:	489b      	ldr	r0, [pc, #620]	@ (80006c8 <main+0x334>)
 800045c:	f000 fda3 	bl	8000fa6 <SPI_SendData>

		//더미데이터 읽기 -> 아두이노에 있던 데이터
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000460:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000464:	2201      	movs	r2, #1
 8000466:	4619      	mov	r1, r3
 8000468:	4897      	ldr	r0, [pc, #604]	@ (80006c8 <main+0x334>)
 800046a:	f000 fdd3 	bl	8001014 <SPI_ReceiveData>

		//아두이노에서 데이터 잘 받았는지 수신 명령
		SPI_SendData(SPI2, &dummy_write, 1);
 800046e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000472:	2201      	movs	r2, #1
 8000474:	4619      	mov	r1, r3
 8000476:	4894      	ldr	r0, [pc, #592]	@ (80006c8 <main+0x334>)
 8000478:	f000 fd95 	bl	8000fa6 <SPI_SendData>

		//ack nack확인
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800047c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000480:	2201      	movs	r2, #1
 8000482:	4619      	mov	r1, r3
 8000484:	4890      	ldr	r0, [pc, #576]	@ (80006c8 <main+0x334>)
 8000486:	f000 fdc5 	bl	8001014 <SPI_ReceiveData>

		//ack이면 데이터 읽어오게 하기
		if(SPI_VerifyResponse(ackbyte))
 800048a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff70 	bl	8000374 <SPI_VerifyResponse>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d01f      	beq.n	80004da <main+0x146>
		{
			//send arguments
			args[0] = ANALOG_PIN0;
 800049a:	2300      	movs	r3, #0
 800049c:	f887 3020 	strb.w	r3, [r7, #32]
			SPI_SendData(SPI2, args, 1);
 80004a0:	f107 0320 	add.w	r3, r7, #32
 80004a4:	2201      	movs	r2, #1
 80004a6:	4619      	mov	r1, r3
 80004a8:	4887      	ldr	r0, [pc, #540]	@ (80006c8 <main+0x334>)
 80004aa:	f000 fd7c 	bl	8000fa6 <SPI_SendData>
			//더미데이터를 한 번 더 보냈으므로
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004ae:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 80004b2:	2201      	movs	r2, #1
 80004b4:	4619      	mov	r1, r3
 80004b6:	4884      	ldr	r0, [pc, #528]	@ (80006c8 <main+0x334>)
 80004b8:	f000 fdac 	bl	8001014 <SPI_ReceiveData>

			//아두이노에서 adc가 끝나는 시간을 맞추기 위해 딜레이 삽입
			delay();
 80004bc:	f7ff fee0 	bl	8000280 <delay>

			//더미데이터를 보내 아두이노에서 읽은 아날로그 값을 가져온다
			SPI_SendData(SPI2, &dummy_write, 1);
 80004c0:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	487f      	ldr	r0, [pc, #508]	@ (80006c8 <main+0x334>)
 80004ca:	f000 fd6c 	bl	8000fa6 <SPI_SendData>

			//가져온 데이터를 저장한다
			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 80004ce:	1cfb      	adds	r3, r7, #3
 80004d0:	2201      	movs	r2, #1
 80004d2:	4619      	mov	r1, r3
 80004d4:	487c      	ldr	r0, [pc, #496]	@ (80006c8 <main+0x334>)
 80004d6:	f000 fd9d 	bl	8001014 <SPI_ReceiveData>


		/*
		 * LED 온오프상태 읽어오기
		 */
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 80004da:	bf00      	nop
 80004dc:	2100      	movs	r1, #0
 80004de:	487b      	ldr	r0, [pc, #492]	@ (80006cc <main+0x338>)
 80004e0:	f000 fc78 	bl	8000dd4 <GPIO_ReadFromInputPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <main+0x148>

		delay();
 80004ea:	f7ff fec9 	bl	8000280 <delay>

		//SPI2 peri enable 필수이나 첫 번째 에서 했음
//		SPI_PeriClockControl(SPI2, ENABLE);

		//센서 리드 명령어
		commandcode = COMMAND_LED_READ;
 80004ee:	2352      	movs	r3, #82	@ 0x52
 80004f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		SPI_SendData(SPI2, &commandcode, 1);
 80004f4:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	4872      	ldr	r0, [pc, #456]	@ (80006c8 <main+0x334>)
 80004fe:	f000 fd52 	bl	8000fa6 <SPI_SendData>

		//더미데이터 읽기 -> 아두이노에 있던 데이터
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000502:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	486f      	ldr	r0, [pc, #444]	@ (80006c8 <main+0x334>)
 800050c:	f000 fd82 	bl	8001014 <SPI_ReceiveData>

		//아두이노에서 데이터 잘 받았는지 수신 명령 -더미데이터 전송
		SPI_SendData(SPI2, &dummy_write, 1);
 8000510:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000514:	2201      	movs	r2, #1
 8000516:	4619      	mov	r1, r3
 8000518:	486b      	ldr	r0, [pc, #428]	@ (80006c8 <main+0x334>)
 800051a:	f000 fd44 	bl	8000fa6 <SPI_SendData>

		//ack nack확인
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800051e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	4868      	ldr	r0, [pc, #416]	@ (80006c8 <main+0x334>)
 8000528:	f000 fd74 	bl	8001014 <SPI_ReceiveData>

		//ack이면 데이터 읽어오게 하기
		if(SPI_VerifyResponse(ackbyte))
 800052c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff1f 	bl	8000374 <SPI_VerifyResponse>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d01f      	beq.n	800057c <main+0x1e8>
		{
			//send arguments
			args[0] = LED_PIN_9;
 800053c:	2309      	movs	r3, #9
 800053e:	f887 3020 	strb.w	r3, [r7, #32]
			SPI_SendData(SPI2, args, 1);
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2201      	movs	r2, #1
 8000548:	4619      	mov	r1, r3
 800054a:	485f      	ldr	r0, [pc, #380]	@ (80006c8 <main+0x334>)
 800054c:	f000 fd2b 	bl	8000fa6 <SPI_SendData>

			//데이터를 한 번 더 보냈으므로 RXNE 버퍼 초기화 위해서
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000550:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	485b      	ldr	r0, [pc, #364]	@ (80006c8 <main+0x334>)
 800055a:	f000 fd5b 	bl	8001014 <SPI_ReceiveData>

			//아두이노에서 adc가 끝나는 시간을 맞추기 위해 딜레이 삽입
			delay();
 800055e:	f7ff fe8f 	bl	8000280 <delay>

			//더미데이터를 보내 아두이노에서 읽은 아날로그 값을 가져온다
			SPI_SendData(SPI2, &dummy_write, 1);
 8000562:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	4857      	ldr	r0, [pc, #348]	@ (80006c8 <main+0x334>)
 800056c:	f000 fd1b 	bl	8000fa6 <SPI_SendData>

			//가져온 데이터를 저장한다
			uint8_t led_status_read;
			SPI_ReceiveData(SPI2, &led_status_read, 1);
 8000570:	1cbb      	adds	r3, r7, #2
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	4854      	ldr	r0, [pc, #336]	@ (80006c8 <main+0x334>)
 8000578:	f000 fd4c 	bl	8001014 <SPI_ReceiveData>
		}

		/*
		 * 아두이노에서 문자열 프린트하기
		 */
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 800057c:	bf00      	nop
 800057e:	2100      	movs	r1, #0
 8000580:	4852      	ldr	r0, [pc, #328]	@ (80006cc <main+0x338>)
 8000582:	f000 fc27 	bl	8000dd4 <GPIO_ReadFromInputPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0f8      	beq.n	800057e <main+0x1ea>

		delay();
 800058c:	f7ff fe78 	bl	8000280 <delay>

		//SPI2 peri enable 필수이나 첫 번째 에서 했음
//		SPI_PeriClockControl(SPI2, ENABLE);

		//센서 리드 명령어
		commandcode = COMMAND_PRINT;
 8000590:	2353      	movs	r3, #83	@ 0x53
 8000592:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		SPI_SendData(SPI2, &commandcode, 1);
 8000596:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	484a      	ldr	r0, [pc, #296]	@ (80006c8 <main+0x334>)
 80005a0:	f000 fd01 	bl	8000fa6 <SPI_SendData>

		//더미데이터 읽기 -> 아두이노에 있던 데이터
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005a4:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 80005a8:	2201      	movs	r2, #1
 80005aa:	4619      	mov	r1, r3
 80005ac:	4846      	ldr	r0, [pc, #280]	@ (80006c8 <main+0x334>)
 80005ae:	f000 fd31 	bl	8001014 <SPI_ReceiveData>

		//아두이노에서 데이터 잘 받았는지 수신 명령 -더미데이터 전송
		SPI_SendData(SPI2, &dummy_write, 1);
 80005b2:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80005b6:	2201      	movs	r2, #1
 80005b8:	4619      	mov	r1, r3
 80005ba:	4843      	ldr	r0, [pc, #268]	@ (80006c8 <main+0x334>)
 80005bc:	f000 fcf3 	bl	8000fa6 <SPI_SendData>

		//ack nack확인
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80005c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	483f      	ldr	r0, [pc, #252]	@ (80006c8 <main+0x334>)
 80005ca:	f000 fd23 	bl	8001014 <SPI_ReceiveData>

		//ack이면 데이터 읽어오게 하기
		uint8_t message[] = "Hello world!!";
 80005ce:	4b40      	ldr	r3, [pc, #256]	@ (80006d0 <main+0x33c>)
 80005d0:	f107 0410 	add.w	r4, r7, #16
 80005d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d6:	c407      	stmia	r4!, {r0, r1, r2}
 80005d8:	8023      	strh	r3, [r4, #0]
		if(SPI_VerifyResponse(ackbyte))
 80005da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fec8 	bl	8000374 <SPI_VerifyResponse>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d038      	beq.n	800065c <main+0x2c8>
		{
			//send arguments
			args[0] = strlen((char *)message);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fdee 	bl	80001d0 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f887 3020 	strb.w	r3, [r7, #32]
			SPI_SendData(SPI2, args, 1);
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	4830      	ldr	r0, [pc, #192]	@ (80006c8 <main+0x334>)
 8000606:	f000 fcce 	bl	8000fa6 <SPI_SendData>

			//데이터를 한 번 더 보냈으므로 RXNE 버퍼 초기화 위해서
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 800060a:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	482d      	ldr	r0, [pc, #180]	@ (80006c8 <main+0x334>)
 8000614:	f000 fcfe 	bl	8001014 <SPI_ReceiveData>

			//아두이노 준비시간 대기
			delay();
 8000618:	f7ff fe32 	bl	8000280 <delay>

			//데이터 전송 message 길이만큼
			for(uint8_t i = 0; i< args[0]; i++)
 800061c:	2300      	movs	r3, #0
 800061e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000622:	e015      	b.n	8000650 <main+0x2bc>
			{
				//1번 보내면 MISO에서 받은 데이터 읽어줘야함 -> 초기화 위해서
				SPI_SendData(SPI2, &message[i], 1);
 8000624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000628:	f107 0210 	add.w	r2, r7, #16
 800062c:	4413      	add	r3, r2
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	4825      	ldr	r0, [pc, #148]	@ (80006c8 <main+0x334>)
 8000634:	f000 fcb7 	bl	8000fa6 <SPI_SendData>
				SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000638:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	4821      	ldr	r0, [pc, #132]	@ (80006c8 <main+0x334>)
 8000642:	f000 fce7 	bl	8001014 <SPI_ReceiveData>
			for(uint8_t i = 0; i< args[0]; i++)
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800064a:	3301      	adds	r3, #1
 800064c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000650:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000654:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000658:	429a      	cmp	r2, r3
 800065a:	d3e3      	bcc.n	8000624 <main+0x290>
		}

		/*
		 * 아두이노 아이디 읽어오기
		 */
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 800065c:	bf00      	nop
 800065e:	2100      	movs	r1, #0
 8000660:	481a      	ldr	r0, [pc, #104]	@ (80006cc <main+0x338>)
 8000662:	f000 fbb7 	bl	8000dd4 <GPIO_ReadFromInputPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0f8      	beq.n	800065e <main+0x2ca>

		delay();
 800066c:	f7ff fe08 	bl	8000280 <delay>

		//SPI2 peri enable 필수이나 첫 번째 에서 했음
//		SPI_PeriClockControl(SPI2, ENABLE);

		//센서 리드 명령어
		commandcode = COMMAND_ID_READ;
 8000670:	2354      	movs	r3, #84	@ 0x54
 8000672:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		SPI_SendData(SPI2, &commandcode, 1);
 8000676:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 800067a:	2201      	movs	r2, #1
 800067c:	4619      	mov	r1, r3
 800067e:	4812      	ldr	r0, [pc, #72]	@ (80006c8 <main+0x334>)
 8000680:	f000 fc91 	bl	8000fa6 <SPI_SendData>

		//더미데이터 읽기 -> 아두이노에 있던 데이터
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000684:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	480e      	ldr	r0, [pc, #56]	@ (80006c8 <main+0x334>)
 800068e:	f000 fcc1 	bl	8001014 <SPI_ReceiveData>

		//아두이노에서 데이터 잘 받았는지 수신 명령 -더미데이터 전송
		SPI_SendData(SPI2, &dummy_write, 1);
 8000692:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <main+0x334>)
 800069c:	f000 fc83 	bl	8000fa6 <SPI_SendData>

		//ack nack확인
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80006a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	4807      	ldr	r0, [pc, #28]	@ (80006c8 <main+0x334>)
 80006aa:	f000 fcb3 	bl	8001014 <SPI_ReceiveData>

		//ack이면 아이디 읽어오기
		uint8_t id[11];
		uint32_t i = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(SPI_VerifyResponse(ackbyte))
 80006b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fe5c 	bl	8000374 <SPI_VerifyResponse>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d027      	beq.n	8000712 <main+0x37e>
		{
			//데이터 전송 message 길이만큼
			for(i = 0; i< args[0]; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006c6:	e017      	b.n	80006f8 <main+0x364>
 80006c8:	40003800 	.word	0x40003800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	08001f34 	.word	0x08001f34
			{
				//1번 보내면 MISO에서 받은 데이터 읽어줘야함 -> 초기화 위해서
				SPI_SendData(SPI2, &dummy_write, 1);
 80006d4:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	4816      	ldr	r0, [pc, #88]	@ (8000738 <main+0x3a4>)
 80006de:	f000 fc62 	bl	8000fa6 <SPI_SendData>
				SPI_ReceiveData(SPI2, &id[i], 1);
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006e6:	4413      	add	r3, r2
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	4812      	ldr	r0, [pc, #72]	@ (8000738 <main+0x3a4>)
 80006ee:	f000 fc91 	bl	8001014 <SPI_ReceiveData>
			for(i = 0; i< args[0]; i++)
 80006f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006f4:	3301      	adds	r3, #1
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fc:	461a      	mov	r2, r3
 80006fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000700:	4293      	cmp	r3, r2
 8000702:	d3e7      	bcc.n	80006d4 <main+0x340>
			}
			id[10] = '\n';
 8000704:	230a      	movs	r3, #10
 8000706:	73bb      	strb	r3, [r7, #14]
			printf("COMMAND_ID : %s \n", id);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	480b      	ldr	r0, [pc, #44]	@ (800073c <main+0x3a8>)
 800070e:	f000 fd95 	bl	800123c <iprintf>
		}

	//		SPI_SendData(SPI2,user_data,strlen((const char *)user_data));

			//SPI가 busy인지 확인
			while(SPI_GetFlagStatus(SPI2, SPI_SR_BSY));		//1을 줄 때까지 대기
 8000712:	bf00      	nop
 8000714:	2107      	movs	r1, #7
 8000716:	4808      	ldr	r0, [pc, #32]	@ (8000738 <main+0x3a4>)
 8000718:	f000 fc32 	bl	8000f80 <SPI_GetFlagStatus>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f8      	bne.n	8000714 <main+0x380>

			//disable SPI2
			SPI_PeriClockControl(SPI2, DISABLE);
 8000722:	2100      	movs	r1, #0
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <main+0x3a4>)
 8000726:	f000 fb6b 	bl	8000e00 <SPI_PeriClockControl>

			printf("COMMAND_ID : %s \n", id);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4803      	ldr	r0, [pc, #12]	@ (800073c <main+0x3a8>)
 8000730:	f000 fd84 	bl	800123c <iprintf>
	{
 8000734:	e63e      	b.n	80003b4 <main+0x20>
 8000736:	bf00      	nop
 8000738:	40003800 	.word	0x40003800
 800073c:	08001f20 	.word	0x08001f20

08000740 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	e00a      	b.n	8000768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000752:	f3af 8000 	nop.w
 8000756:	4601      	mov	r1, r0
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	60ba      	str	r2, [r7, #8]
 800075e:	b2ca      	uxtb	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbf0      	blt.n	8000752 <_read+0x12>
  }

  return len;
 8000770:	687b      	ldr	r3, [r7, #4]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e009      	b.n	80007a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	60ba      	str	r2, [r7, #8]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	dbf1      	blt.n	800078c <_write+0x12>
  }
  return len;
 80007a8:	687b      	ldr	r3, [r7, #4]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <_close>:

int _close(int file)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007d8:	605a      	str	r2, [r3, #4]
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <_isatty>:

int _isatty(int file)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b085      	sub	sp, #20
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
	...

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f000 fd9e 	bl	8001384 <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20020000 	.word	0x20020000
 8000874:	00000400 	.word	0x00000400
 8000878:	20000078 	.word	0x20000078
 800087c:	200001c8 	.word	0x200001c8

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	@ (80008cc <LoopForever+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ae:	f000 fd6f 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fd6f 	bl	8000394 <main>

080008b6 <LoopForever>:

LoopForever:
  b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008c4:	08001f88 	.word	0x08001f88
  ldr r2, =_sbss
 80008c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008cc:	200001c8 	.word	0x200001c8

080008d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC_IRQHandler>
	...

080008d4 <GPIO_PeriClockControl>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
	//GPIO Peripheral Clock Enable
	//GPIO 주변장치 클럭 연결
	if(EnorDi == ENABLE)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d157      	bne.n	8000996 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a59      	ldr	r2, [pc, #356]	@ (8000a50 <GPIO_PeriClockControl+0x17c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d106      	bne.n	80008fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80008ee:	4b59      	ldr	r3, [pc, #356]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a58      	ldr	r2, [pc, #352]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
//		else if(pGPIOx == GPIOI)
//		{
//			GPIOI_PCLK_DI();
//		}
	}
}
 80008fa:	e0a3      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a56      	ldr	r2, [pc, #344]	@ (8000a58 <GPIO_PeriClockControl+0x184>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d106      	bne.n	8000912 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000904:	4b53      	ldr	r3, [pc, #332]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000908:	4a52      	ldr	r2, [pc, #328]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000910:	e098      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a51      	ldr	r2, [pc, #324]	@ (8000a5c <GPIO_PeriClockControl+0x188>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800091a:	4b4e      	ldr	r3, [pc, #312]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a4d      	ldr	r2, [pc, #308]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000926:	e08d      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a4d      	ldr	r2, [pc, #308]	@ (8000a60 <GPIO_PeriClockControl+0x18c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000930:	4b48      	ldr	r3, [pc, #288]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	4a47      	ldr	r2, [pc, #284]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800093c:	e082      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a48      	ldr	r2, [pc, #288]	@ (8000a64 <GPIO_PeriClockControl+0x190>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a42      	ldr	r2, [pc, #264]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000952:	e077      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a44      	ldr	r2, [pc, #272]	@ (8000a68 <GPIO_PeriClockControl+0x194>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800095c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	4a3c      	ldr	r2, [pc, #240]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000968:	e06c      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a6c <GPIO_PeriClockControl+0x198>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d106      	bne.n	8000980 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000972:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a37      	ldr	r2, [pc, #220]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800097e:	e061      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a3b      	ldr	r2, [pc, #236]	@ (8000a70 <GPIO_PeriClockControl+0x19c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d15d      	bne.n	8000a44 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000988:	4b32      	ldr	r3, [pc, #200]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098c:	4a31      	ldr	r2, [pc, #196]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 800098e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000992:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000994:	e056      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a2d      	ldr	r2, [pc, #180]	@ (8000a50 <GPIO_PeriClockControl+0x17c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800099e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009aa:	e04b      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000a58 <GPIO_PeriClockControl+0x184>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80009b4:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a26      	ldr	r2, [pc, #152]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009ba:	f023 0302 	bic.w	r3, r3, #2
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009c0:	e040      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a25      	ldr	r2, [pc, #148]	@ (8000a5c <GPIO_PeriClockControl+0x188>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80009ca:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009d0:	f023 0304 	bic.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009d6:	e035      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <GPIO_PeriClockControl+0x18c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009e6:	f023 0308 	bic.w	r3, r3, #8
 80009ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009ec:	e02a      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <GPIO_PeriClockControl+0x190>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a16      	ldr	r2, [pc, #88]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 80009fc:	f023 0310 	bic.w	r3, r3, #16
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a02:	e01f      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <GPIO_PeriClockControl+0x194>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a10:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000a12:	f023 0320 	bic.w	r3, r3, #32
 8000a16:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a18:	e014      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <GPIO_PeriClockControl+0x198>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a2e:	e009      	b.n	8000a44 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <GPIO_PeriClockControl+0x19c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d105      	bne.n	8000a44 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <GPIO_PeriClockControl+0x180>)
 8000a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a42:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40021400 	.word	0x40021400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40021c00 	.word	0x40021c00

08000a74 <GPIO_Init>:
 *
 * @추가 내용					-	None
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandles)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
		1101: AF13
		1110: AF14
		1111: AF15
	 *
	 */
	uint32_t temp = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

	//GPIO 그룹 핀 인에이블을 여기서 진행하면 계속 할 필요 없음
	GPIO_PeriClockControl(pGPIOHandles->pGPIOx, ENABLE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff24 	bl	80008d4 <GPIO_PeriClockControl>

	//1번 설정 - 인터럽트 제외 코드 작성
	if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d81f      	bhi.n	8000ad4 <GPIO_Init+0x60>
	{
		//GPIO핀 모드가 인터럽트 모드보다 작을때 -> 인터럽트 모드는 4부터 시작
		//GPIO핀마다 2비트 사용하므로 핀 번호의 2배만큼 시프트
		//ex) 1번핀 -> 1 * 2 >>> 레지스터 2비트 부터 시작
		//    10번핀 -> 10 * 2 >>> 레지스터 20비트 부터 시작 21번 비트까지
		temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	795b      	ldrb	r3, [r3, #5]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	791b      	ldrb	r3, [r3, #4]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	617b      	str	r3, [r7, #20]

		//이후 temp 값을 레지스터에 저장한다
		//GPIO_Handle_t 구조체는 GPIO_RegDef_t *pGPIOx와 GPIO_PinConfig_t GPIO_PinConfig 모두 가지고 있는 구조체임
		pGPIOHandles->pGPIOx->MODER &= ~(0x03 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber); //비트 클리어
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	408b      	lsls	r3, r1
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	400a      	ands	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
		pGPIOHandles->pGPIOx->MODER |= temp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6819      	ldr	r1, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e0c2      	b.n	8000c5a <GPIO_Init+0x1e6>

	}
	else
	{
		if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_INT_FT)		//Falling Edge 일 때
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	795b      	ldrb	r3, [r3, #5]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d817      	bhi.n	8000b0c <GPIO_Init+0x98>
		{
			//Falling Edge 레지스터 규정
			EXTI->FTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000adc:	4b47      	ldr	r3, [pc, #284]	@ (8000bfc <GPIO_Init+0x188>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	7912      	ldrb	r2, [r2, #4]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	408a      	lsls	r2, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	4a43      	ldr	r2, [pc, #268]	@ (8000bfc <GPIO_Init+0x188>)
 8000aee:	430b      	orrs	r3, r1
 8000af0:	60d3      	str	r3, [r2, #12]
			//어떠한 이유로 인해 Rising Edge가 규정되어 있으수도 있으므로 클리어
			EXTI->RTSR &= ~(1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000af2:	4b42      	ldr	r3, [pc, #264]	@ (8000bfc <GPIO_Init+0x188>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	7912      	ldrb	r2, [r2, #4]
 8000afa:	4611      	mov	r1, r2
 8000afc:	2201      	movs	r2, #1
 8000afe:	408a      	lsls	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	4611      	mov	r1, r2
 8000b04:	4a3d      	ldr	r2, [pc, #244]	@ (8000bfc <GPIO_Init+0x188>)
 8000b06:	400b      	ands	r3, r1
 8000b08:	6093      	str	r3, [r2, #8]
 8000b0a:	e035      	b.n	8000b78 <GPIO_Init+0x104>
		}
		else if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_INT_RT)		//Rising Edge 일 때
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	795b      	ldrb	r3, [r3, #5]
 8000b10:	2b05      	cmp	r3, #5
 8000b12:	d817      	bhi.n	8000b44 <GPIO_Init+0xd0>
		{
			//Rising Edge 레지스터 규정
			EXTI->RTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000b14:	4b39      	ldr	r3, [pc, #228]	@ (8000bfc <GPIO_Init+0x188>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7912      	ldrb	r2, [r2, #4]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	2201      	movs	r2, #1
 8000b20:	408a      	lsls	r2, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	4a35      	ldr	r2, [pc, #212]	@ (8000bfc <GPIO_Init+0x188>)
 8000b26:	430b      	orrs	r3, r1
 8000b28:	6093      	str	r3, [r2, #8]
			//어떠한 이유로 인해 Rising Edge가 규정되어 있으수도 있으므로 클리어
			EXTI->FTSR &= ~(1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000b2a:	4b34      	ldr	r3, [pc, #208]	@ (8000bfc <GPIO_Init+0x188>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	7912      	ldrb	r2, [r2, #4]
 8000b32:	4611      	mov	r1, r2
 8000b34:	2201      	movs	r2, #1
 8000b36:	408a      	lsls	r2, r1
 8000b38:	43d2      	mvns	r2, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bfc <GPIO_Init+0x188>)
 8000b3e:	400b      	ands	r3, r1
 8000b40:	60d3      	str	r3, [r2, #12]
 8000b42:	e019      	b.n	8000b78 <GPIO_Init+0x104>
		}
		else if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_INT_FT_RT)		//Both Edge 일 때
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	795b      	ldrb	r3, [r3, #5]
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d815      	bhi.n	8000b78 <GPIO_Init+0x104>
		{
			//양쪽 에지 사용
			EXTI->RTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <GPIO_Init+0x188>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	7912      	ldrb	r2, [r2, #4]
 8000b54:	4611      	mov	r1, r2
 8000b56:	2201      	movs	r2, #1
 8000b58:	408a      	lsls	r2, r1
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4a27      	ldr	r2, [pc, #156]	@ (8000bfc <GPIO_Init+0x188>)
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	6093      	str	r3, [r2, #8]
			//양쪽의 에지 모두 활성화 하므로
			EXTI->FTSR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000b62:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <GPIO_Init+0x188>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	7912      	ldrb	r2, [r2, #4]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	408a      	lsls	r2, r1
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a22      	ldr	r2, [pc, #136]	@ (8000bfc <GPIO_Init+0x188>)
 8000b74:	430b      	orrs	r3, r1
 8000b76:	60d3      	str	r3, [r2, #12]
		}

		//GPIO 보트 설정 SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber / 4);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	791b      	ldrb	r3, [r3, #4]
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = (pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber % 4);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	791b      	ldrb	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandles->pGPIOx);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c00 <GPIO_Init+0x18c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d045      	beq.n	8000c20 <GPIO_Init+0x1ac>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1a      	ldr	r2, [pc, #104]	@ (8000c04 <GPIO_Init+0x190>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d02b      	beq.n	8000bf6 <GPIO_Init+0x182>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <GPIO_Init+0x194>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d024      	beq.n	8000bf2 <GPIO_Init+0x17e>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a17      	ldr	r2, [pc, #92]	@ (8000c0c <GPIO_Init+0x198>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d01d      	beq.n	8000bee <GPIO_Init+0x17a>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a16      	ldr	r2, [pc, #88]	@ (8000c10 <GPIO_Init+0x19c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d016      	beq.n	8000bea <GPIO_Init+0x176>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a14      	ldr	r2, [pc, #80]	@ (8000c14 <GPIO_Init+0x1a0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d00f      	beq.n	8000be6 <GPIO_Init+0x172>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <GPIO_Init+0x1a4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d008      	beq.n	8000be2 <GPIO_Init+0x16e>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a11      	ldr	r2, [pc, #68]	@ (8000c1c <GPIO_Init+0x1a8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <GPIO_Init+0x16a>
 8000bda:	2307      	movs	r3, #7
 8000bdc:	e021      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000bde:	2300      	movs	r3, #0
 8000be0:	e01f      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000be2:	2306      	movs	r3, #6
 8000be4:	e01d      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000be6:	2305      	movs	r3, #5
 8000be8:	e01b      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000bea:	2304      	movs	r3, #4
 8000bec:	e019      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e017      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e015      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e013      	b.n	8000c22 <GPIO_Init+0x1ae>
 8000bfa:	bf00      	nop
 8000bfc:	40013c00 	.word	0x40013c00
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020c00 	.word	0x40020c00
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40021400 	.word	0x40021400
 8000c18:	40021800 	.word	0x40021800
 8000c1c:	40021c00 	.word	0x40021c00
 8000c20:	2300      	movs	r3, #0
 8000c22:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c24:	4b68      	ldr	r3, [pc, #416]	@ (8000dc8 <GPIO_Init+0x354>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c28:	4a67      	ldr	r2, [pc, #412]	@ (8000dc8 <GPIO_Init+0x354>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 8000c30:	7c7a      	ldrb	r2, [r7, #17]
 8000c32:	7cbb      	ldrb	r3, [r7, #18]
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	fa02 f103 	lsl.w	r1, r2, r3
 8000c3a:	4a64      	ldr	r2, [pc, #400]	@ (8000dcc <GPIO_Init+0x358>)
 8000c3c:	7cfb      	ldrb	r3, [r7, #19]
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//IMR에 전달할 exti 인에이블
		EXTI->IMR |= (1 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber);
 8000c44:	4b62      	ldr	r3, [pc, #392]	@ (8000dd0 <GPIO_Init+0x35c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	7912      	ldrb	r2, [r2, #4]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	408a      	lsls	r2, r1
 8000c52:	4611      	mov	r1, r2
 8000c54:	4a5e      	ldr	r2, [pc, #376]	@ (8000dd0 <GPIO_Init+0x35c>)
 8000c56:	430b      	orrs	r3, r1
 8000c58:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]

	//2번 설정 핀 속도
	temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	799b      	ldrb	r3, [r3, #6]
 8000c62:	461a      	mov	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	791b      	ldrb	r3, [r3, #4]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
	pGPIOHandles->pGPIOx->OSPEEDR &= ~(0x03 <<(2* pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber)); //비트 클리어
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	791b      	ldrb	r3, [r3, #4]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4619      	mov	r1, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	609a      	str	r2, [r3, #8]
	pGPIOHandles->pGPIOx->OSPEEDR |= temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6899      	ldr	r1, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	609a      	str	r2, [r3, #8]

	temp =0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

	//3번 설정 풀업 풀다운
	temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	79db      	ldrb	r3, [r3, #7]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
	pGPIOHandles->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber)); //비트 클리어
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	400a      	ands	r2, r1
 8000cd0:	60da      	str	r2, [r3, #12]
	pGPIOHandles->pGPIOx->PUPDR |= temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68d9      	ldr	r1, [r3, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

	//4번 설정 출력 타입 설정
	//16비트 설정함 r각 1비트
	temp = (pGPIOHandles->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	617b      	str	r3, [r7, #20]
	pGPIOHandles->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber); //비트 클리어
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2301      	movs	r3, #1
 8000d04:	408b      	lsls	r3, r1
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4619      	mov	r1, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	400a      	ands	r2, r1
 8000d10:	605a      	str	r2, [r3, #4]
	pGPIOHandles->pGPIOx->OTYPER |= temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6859      	ldr	r1, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]

	//5번 ALT 기능 모드 설정
	if(pGPIOHandles->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	795b      	ldrb	r3, [r3, #5]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d147      	bne.n	8000dbe <GPIO_Init+0x34a>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandles->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	60bb      	str	r3, [r7, #8]
		if(temp1 == 0)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11a      	bne.n	8000d7e <GPIO_Init+0x30a>
		{
			pGPIOHandles->pGPIOx->AFRL &= ~(0xF << (4 * temp2) );
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6a1a      	ldr	r2, [r3, #32]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	210f      	movs	r1, #15
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	400a      	ands	r2, r1
 8000d62:	621a      	str	r2, [r3, #32]
			pGPIOHandles->pGPIOx->AFRL |= (0xF << (4 * temp2) );
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6a1a      	ldr	r2, [r3, #32]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	210f      	movs	r1, #15
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4619      	mov	r1, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	621a      	str	r2, [r3, #32]
		}
		if(temp2 == 1)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d11c      	bne.n	8000dbe <GPIO_Init+0x34a>
		{
			pGPIOHandles->pGPIOx->AFRH &= ~(0xF << (4 * temp2) );
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	210f      	movs	r1, #15
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandles->pGPIOx->AFRH |= (pGPIOHandles->GPIO_PinConfig.GPIO_AltFunMode << (4 * temp2) );
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7a5b      	ldrb	r3, [r3, #9]
 8000daa:	4619      	mov	r1, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
		}
	}


}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	40013c00 	.word	0x40013c00

08000dd4 <GPIO_ReadFromInputPin>:
 * @반환값					-	핀 입력 High or Low (1 혹은 0)
 *
 * @추가 내용					-	None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
	//지역변수 하나 사용
	uint8_t value;
	//해당 지역변수로 값을 저장하기 위해 Input Data Register(IDR)의 레지스터를 핀 수만큼
	//오른쪽으로 시프트 하고, 0x00000001을 논리 곱셈하여 값이 1인지 0인지 확인한다.
	//반드시 형 변환(type casting) 사용
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
	//이후 값을 리턴한다.
	return value;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
	...

08000e00 <SPI_PeriClockControl>:
 *
 * @추가 내용					-	None
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	//각 주변장치마다 RCC에서 Enable/Disable 진행 필수
	if(EnorDi == ENABLE)
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d12b      	bne.n	8000e6a <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a2d      	ldr	r2, [pc, #180]	@ (8000ecc <SPI_PeriClockControl+0xcc>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 8000e26:	e04b      	b.n	8000ec0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed4 <SPI_PeriClockControl+0xd4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d106      	bne.n	8000e3e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	4a26      	ldr	r2, [pc, #152]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e3c:	e040      	b.n	8000ec0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a25      	ldr	r2, [pc, #148]	@ (8000ed8 <SPI_PeriClockControl+0xd8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d106      	bne.n	8000e54 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000e46:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e52:	e035      	b.n	8000ec0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <SPI_PeriClockControl+0xdc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d131      	bne.n	8000ec0 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e66:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e68:	e02a      	b.n	8000ec0 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <SPI_PeriClockControl+0xcc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e7c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e7e:	e01f      	b.n	8000ec0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <SPI_PeriClockControl+0xd4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d106      	bne.n	8000e96 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e92:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e94:	e014      	b.n	8000ec0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed8 <SPI_PeriClockControl+0xd8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d106      	bne.n	8000eac <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000ea4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eaa:	e009      	b.n	8000ec0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <SPI_PeriClockControl+0xdc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d105      	bne.n	8000ec0 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb8:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <SPI_PeriClockControl+0xd0>)
 8000eba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000ebe:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40003800 	.word	0x40003800
 8000ed8:	40003c00 	.word	0x40003c00
 8000edc:	40013400 	.word	0x40013400

08000ee0 <SPI_Init>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void SPI_Init(SPI_Handle_t *pSPIHandles)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]

	//SPI 클럭 인에이블 - 여기다 써두면 초기화 할 떄 사용 가능
	SPI_PeriClockControl(pSPIHandles->pSPIx, ENABLE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff84 	bl	8000e00 <SPI_PeriClockControl>


	//1. 디바이스 모드 설정
	tempreg |= (pSPIHandles->SPI_PinConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

	//2. 통신방식 설정
	if(pSPIHandles->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	795b      	ldrb	r3, [r3, #5]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d104      	bne.n	8000f16 <SPI_Init+0x36>
	{
		//BIDIMODE 0이어야함
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e014      	b.n	8000f40 <SPI_Init+0x60>
	}
	else if(pSPIHandles->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	795b      	ldrb	r3, [r3, #5]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d104      	bne.n	8000f28 <SPI_Init+0x48>
	{
		//BIDIMODE 1이어야함
		tempreg |= (1<<SPI_CR1_BIDIMODE);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e00b      	b.n	8000f40 <SPI_Init+0x60>
	}
	else if(pSPIHandles->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_RXONLY)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	795b      	ldrb	r3, [r3, #5]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d107      	bne.n	8000f40 <SPI_Init+0x60>
	{
		//BIDIMODE 0이고 RXONLY가 1이어야함
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f36:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<SPI_CR1_RXONLY);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f3e:	60fb      	str	r3, [r7, #12]
	}

	//3. 클럭 스피트 설정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	799b      	ldrb	r3, [r3, #6]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

	//4. 데이터 포맷 결정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_DFF << SPI_CR1_DFF;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	79db      	ldrb	r3, [r3, #7]
 8000f50:	02db      	lsls	r3, r3, #11
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

	//5. 클럭 극성 결정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7a1b      	ldrb	r3, [r3, #8]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

	//6. 클럭 에지 결정
	tempreg |= pSPIHandles->SPI_PinConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7a5b      	ldrb	r3, [r3, #9]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]

	//레지스터 저장
	pSPIHandles->pSPIx->CR1 = tempreg;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SPI_GetFlagStatus>:
		SPI4_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <SPI_SendData>:
 * @추가 내용					-	폴링 방식 코드. 모든 데이터를 보낼 때까지 다른것이 간섭 불가
 */

//폴링방식
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000fb2:	e027      	b.n	8001004 <SPI_SendData+0x5e>
	{
		// 1. TXE가 1인지 계속 확인한다.
//		while((pSPIx->SR & (1<<1)) == 0);
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000fb4:	bf00      	nop
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff ffe1 	bl	8000f80 <SPI_GetFlagStatus>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f8      	beq.n	8000fb6 <SPI_SendData+0x10>

		// 2. CR1의 DFF 비트 확인
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00e      	beq.n	8000fee <SPI_SendData+0x48>
		{
			//16비트 설정 시
			//1. DR에서 데이터 불러오기
			pSPIx->DR = *((uint16_t *)pTXBuffer);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	60da      	str	r2, [r3, #12]
			Len--;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
			Len--;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTXBuffer++;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	e00a      	b.n	8001004 <SPI_SendData+0x5e>
		}
		else
		{
			pSPIx->DR = *pTXBuffer;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	60da      	str	r2, [r3, #12]
			Len--;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
			pTXBuffer++;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	3301      	adds	r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1d4      	bne.n	8000fb4 <SPI_SendData+0xe>
		}
	}
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <SPI_ReceiveData>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx,uint8_t *pRXBuffer, uint32_t Len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001020:	e027      	b.n	8001072 <SPI_ReceiveData+0x5e>
	{
		// 1. TRXNE가 1인지 계속 확인한다.
//		while((pSPIx->SR & (1<<1)) == 0);
		while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG) == FLAG_RESET);
 8001022:	bf00      	nop
 8001024:	2101      	movs	r1, #1
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff ffaa 	bl	8000f80 <SPI_GetFlagStatus>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f8      	beq.n	8001024 <SPI_ReceiveData+0x10>

		// 2. CR1의 DFF 비트 확인
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00e      	beq.n	800105c <SPI_ReceiveData+0x48>
		{
			//16비트 설정 시
			//1. RXBuffer에서 데이터 읽어오기
			*((uint16_t *)pRXBuffer) = pSPIx->DR;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	b29a      	uxth	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	801a      	strh	r2, [r3, #0]
			Len--;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	607b      	str	r3, [r7, #4]
			Len--;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3b01      	subs	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
			(uint16_t *)pRXBuffer++;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	e00a      	b.n	8001072 <SPI_ReceiveData+0x5e>
		}
		else
		{
			//8비트 전송일 경우
			*pRXBuffer = pSPIx->DR;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	701a      	strb	r2, [r3, #0]
			Len--;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3b01      	subs	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
			pRXBuffer++;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	3301      	adds	r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1d4      	bne.n	8001022 <SPI_ReceiveData+0xe>
		}
	}
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <SPI_SSOEConfig>:
 * @반환값					-	None
 *
 * @추가 내용					-	None
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 80010a0:	e005      	b.n	80010ae <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f023 0201 	bic.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	605a      	str	r2, [r3, #4]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <std>:
 80010b8:	2300      	movs	r3, #0
 80010ba:	b510      	push	{r4, lr}
 80010bc:	4604      	mov	r4, r0
 80010be:	e9c0 3300 	strd	r3, r3, [r0]
 80010c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010c6:	6083      	str	r3, [r0, #8]
 80010c8:	8181      	strh	r1, [r0, #12]
 80010ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80010cc:	81c2      	strh	r2, [r0, #14]
 80010ce:	6183      	str	r3, [r0, #24]
 80010d0:	4619      	mov	r1, r3
 80010d2:	2208      	movs	r2, #8
 80010d4:	305c      	adds	r0, #92	@ 0x5c
 80010d6:	f000 f906 	bl	80012e6 <memset>
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <std+0x58>)
 80010dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <std+0x5c>)
 80010e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <std+0x60>)
 80010e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <std+0x64>)
 80010e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <std+0x68>)
 80010ec:	6224      	str	r4, [r4, #32]
 80010ee:	429c      	cmp	r4, r3
 80010f0:	d006      	beq.n	8001100 <std+0x48>
 80010f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80010f6:	4294      	cmp	r4, r2
 80010f8:	d002      	beq.n	8001100 <std+0x48>
 80010fa:	33d0      	adds	r3, #208	@ 0xd0
 80010fc:	429c      	cmp	r4, r3
 80010fe:	d105      	bne.n	800110c <std+0x54>
 8001100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001108:	f000 b966 	b.w	80013d8 <__retarget_lock_init_recursive>
 800110c:	bd10      	pop	{r4, pc}
 800110e:	bf00      	nop
 8001110:	08001261 	.word	0x08001261
 8001114:	08001283 	.word	0x08001283
 8001118:	080012bb 	.word	0x080012bb
 800111c:	080012df 	.word	0x080012df
 8001120:	2000007c 	.word	0x2000007c

08001124 <stdio_exit_handler>:
 8001124:	4a02      	ldr	r2, [pc, #8]	@ (8001130 <stdio_exit_handler+0xc>)
 8001126:	4903      	ldr	r1, [pc, #12]	@ (8001134 <stdio_exit_handler+0x10>)
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <stdio_exit_handler+0x14>)
 800112a:	f000 b869 	b.w	8001200 <_fwalk_sglue>
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000
 8001134:	08001c69 	.word	0x08001c69
 8001138:	20000010 	.word	0x20000010

0800113c <cleanup_stdio>:
 800113c:	6841      	ldr	r1, [r0, #4]
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <cleanup_stdio+0x34>)
 8001140:	4299      	cmp	r1, r3
 8001142:	b510      	push	{r4, lr}
 8001144:	4604      	mov	r4, r0
 8001146:	d001      	beq.n	800114c <cleanup_stdio+0x10>
 8001148:	f000 fd8e 	bl	8001c68 <_fflush_r>
 800114c:	68a1      	ldr	r1, [r4, #8]
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <cleanup_stdio+0x38>)
 8001150:	4299      	cmp	r1, r3
 8001152:	d002      	beq.n	800115a <cleanup_stdio+0x1e>
 8001154:	4620      	mov	r0, r4
 8001156:	f000 fd87 	bl	8001c68 <_fflush_r>
 800115a:	68e1      	ldr	r1, [r4, #12]
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <cleanup_stdio+0x3c>)
 800115e:	4299      	cmp	r1, r3
 8001160:	d004      	beq.n	800116c <cleanup_stdio+0x30>
 8001162:	4620      	mov	r0, r4
 8001164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001168:	f000 bd7e 	b.w	8001c68 <_fflush_r>
 800116c:	bd10      	pop	{r4, pc}
 800116e:	bf00      	nop
 8001170:	2000007c 	.word	0x2000007c
 8001174:	200000e4 	.word	0x200000e4
 8001178:	2000014c 	.word	0x2000014c

0800117c <global_stdio_init.part.0>:
 800117c:	b510      	push	{r4, lr}
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <global_stdio_init.part.0+0x30>)
 8001180:	4c0b      	ldr	r4, [pc, #44]	@ (80011b0 <global_stdio_init.part.0+0x34>)
 8001182:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <global_stdio_init.part.0+0x38>)
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	4620      	mov	r0, r4
 8001188:	2200      	movs	r2, #0
 800118a:	2104      	movs	r1, #4
 800118c:	f7ff ff94 	bl	80010b8 <std>
 8001190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001194:	2201      	movs	r2, #1
 8001196:	2109      	movs	r1, #9
 8001198:	f7ff ff8e 	bl	80010b8 <std>
 800119c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011a0:	2202      	movs	r2, #2
 80011a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011a6:	2112      	movs	r1, #18
 80011a8:	f7ff bf86 	b.w	80010b8 <std>
 80011ac:	200001b4 	.word	0x200001b4
 80011b0:	2000007c 	.word	0x2000007c
 80011b4:	08001125 	.word	0x08001125

080011b8 <__sfp_lock_acquire>:
 80011b8:	4801      	ldr	r0, [pc, #4]	@ (80011c0 <__sfp_lock_acquire+0x8>)
 80011ba:	f000 b90e 	b.w	80013da <__retarget_lock_acquire_recursive>
 80011be:	bf00      	nop
 80011c0:	200001bd 	.word	0x200001bd

080011c4 <__sfp_lock_release>:
 80011c4:	4801      	ldr	r0, [pc, #4]	@ (80011cc <__sfp_lock_release+0x8>)
 80011c6:	f000 b909 	b.w	80013dc <__retarget_lock_release_recursive>
 80011ca:	bf00      	nop
 80011cc:	200001bd 	.word	0x200001bd

080011d0 <__sinit>:
 80011d0:	b510      	push	{r4, lr}
 80011d2:	4604      	mov	r4, r0
 80011d4:	f7ff fff0 	bl	80011b8 <__sfp_lock_acquire>
 80011d8:	6a23      	ldr	r3, [r4, #32]
 80011da:	b11b      	cbz	r3, 80011e4 <__sinit+0x14>
 80011dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e0:	f7ff bff0 	b.w	80011c4 <__sfp_lock_release>
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <__sinit+0x28>)
 80011e6:	6223      	str	r3, [r4, #32]
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <__sinit+0x2c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f5      	bne.n	80011dc <__sinit+0xc>
 80011f0:	f7ff ffc4 	bl	800117c <global_stdio_init.part.0>
 80011f4:	e7f2      	b.n	80011dc <__sinit+0xc>
 80011f6:	bf00      	nop
 80011f8:	0800113d 	.word	0x0800113d
 80011fc:	200001b4 	.word	0x200001b4

08001200 <_fwalk_sglue>:
 8001200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001204:	4607      	mov	r7, r0
 8001206:	4688      	mov	r8, r1
 8001208:	4614      	mov	r4, r2
 800120a:	2600      	movs	r6, #0
 800120c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001210:	f1b9 0901 	subs.w	r9, r9, #1
 8001214:	d505      	bpl.n	8001222 <_fwalk_sglue+0x22>
 8001216:	6824      	ldr	r4, [r4, #0]
 8001218:	2c00      	cmp	r4, #0
 800121a:	d1f7      	bne.n	800120c <_fwalk_sglue+0xc>
 800121c:	4630      	mov	r0, r6
 800121e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001222:	89ab      	ldrh	r3, [r5, #12]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d907      	bls.n	8001238 <_fwalk_sglue+0x38>
 8001228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800122c:	3301      	adds	r3, #1
 800122e:	d003      	beq.n	8001238 <_fwalk_sglue+0x38>
 8001230:	4629      	mov	r1, r5
 8001232:	4638      	mov	r0, r7
 8001234:	47c0      	blx	r8
 8001236:	4306      	orrs	r6, r0
 8001238:	3568      	adds	r5, #104	@ 0x68
 800123a:	e7e9      	b.n	8001210 <_fwalk_sglue+0x10>

0800123c <iprintf>:
 800123c:	b40f      	push	{r0, r1, r2, r3}
 800123e:	b507      	push	{r0, r1, r2, lr}
 8001240:	4906      	ldr	r1, [pc, #24]	@ (800125c <iprintf+0x20>)
 8001242:	ab04      	add	r3, sp, #16
 8001244:	6808      	ldr	r0, [r1, #0]
 8001246:	f853 2b04 	ldr.w	r2, [r3], #4
 800124a:	6881      	ldr	r1, [r0, #8]
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f000 f9e7 	bl	8001620 <_vfiprintf_r>
 8001252:	b003      	add	sp, #12
 8001254:	f85d eb04 	ldr.w	lr, [sp], #4
 8001258:	b004      	add	sp, #16
 800125a:	4770      	bx	lr
 800125c:	2000000c 	.word	0x2000000c

08001260 <__sread>:
 8001260:	b510      	push	{r4, lr}
 8001262:	460c      	mov	r4, r1
 8001264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001268:	f000 f868 	bl	800133c <_read_r>
 800126c:	2800      	cmp	r0, #0
 800126e:	bfab      	itete	ge
 8001270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001272:	89a3      	ldrhlt	r3, [r4, #12]
 8001274:	181b      	addge	r3, r3, r0
 8001276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800127a:	bfac      	ite	ge
 800127c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800127e:	81a3      	strhlt	r3, [r4, #12]
 8001280:	bd10      	pop	{r4, pc}

08001282 <__swrite>:
 8001282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001286:	461f      	mov	r7, r3
 8001288:	898b      	ldrh	r3, [r1, #12]
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	4605      	mov	r5, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4616      	mov	r6, r2
 8001292:	d505      	bpl.n	80012a0 <__swrite+0x1e>
 8001294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001298:	2302      	movs	r3, #2
 800129a:	2200      	movs	r2, #0
 800129c:	f000 f83c 	bl	8001318 <_lseek_r>
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012aa:	81a3      	strh	r3, [r4, #12]
 80012ac:	4632      	mov	r2, r6
 80012ae:	463b      	mov	r3, r7
 80012b0:	4628      	mov	r0, r5
 80012b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012b6:	f000 b853 	b.w	8001360 <_write_r>

080012ba <__sseek>:
 80012ba:	b510      	push	{r4, lr}
 80012bc:	460c      	mov	r4, r1
 80012be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c2:	f000 f829 	bl	8001318 <_lseek_r>
 80012c6:	1c43      	adds	r3, r0, #1
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	bf15      	itete	ne
 80012cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012d6:	81a3      	strheq	r3, [r4, #12]
 80012d8:	bf18      	it	ne
 80012da:	81a3      	strhne	r3, [r4, #12]
 80012dc:	bd10      	pop	{r4, pc}

080012de <__sclose>:
 80012de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e2:	f000 b809 	b.w	80012f8 <_close_r>

080012e6 <memset>:
 80012e6:	4402      	add	r2, r0
 80012e8:	4603      	mov	r3, r0
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d100      	bne.n	80012f0 <memset+0xa>
 80012ee:	4770      	bx	lr
 80012f0:	f803 1b01 	strb.w	r1, [r3], #1
 80012f4:	e7f9      	b.n	80012ea <memset+0x4>
	...

080012f8 <_close_r>:
 80012f8:	b538      	push	{r3, r4, r5, lr}
 80012fa:	4d06      	ldr	r5, [pc, #24]	@ (8001314 <_close_r+0x1c>)
 80012fc:	2300      	movs	r3, #0
 80012fe:	4604      	mov	r4, r0
 8001300:	4608      	mov	r0, r1
 8001302:	602b      	str	r3, [r5, #0]
 8001304:	f7ff fa55 	bl	80007b2 <_close>
 8001308:	1c43      	adds	r3, r0, #1
 800130a:	d102      	bne.n	8001312 <_close_r+0x1a>
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	b103      	cbz	r3, 8001312 <_close_r+0x1a>
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	200001b8 	.word	0x200001b8

08001318 <_lseek_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4d07      	ldr	r5, [pc, #28]	@ (8001338 <_lseek_r+0x20>)
 800131c:	4604      	mov	r4, r0
 800131e:	4608      	mov	r0, r1
 8001320:	4611      	mov	r1, r2
 8001322:	2200      	movs	r2, #0
 8001324:	602a      	str	r2, [r5, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	f7ff fa67 	bl	80007fa <_lseek>
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	d102      	bne.n	8001336 <_lseek_r+0x1e>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	b103      	cbz	r3, 8001336 <_lseek_r+0x1e>
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	bd38      	pop	{r3, r4, r5, pc}
 8001338:	200001b8 	.word	0x200001b8

0800133c <_read_r>:
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4d07      	ldr	r5, [pc, #28]	@ (800135c <_read_r+0x20>)
 8001340:	4604      	mov	r4, r0
 8001342:	4608      	mov	r0, r1
 8001344:	4611      	mov	r1, r2
 8001346:	2200      	movs	r2, #0
 8001348:	602a      	str	r2, [r5, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	f7ff f9f8 	bl	8000740 <_read>
 8001350:	1c43      	adds	r3, r0, #1
 8001352:	d102      	bne.n	800135a <_read_r+0x1e>
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	b103      	cbz	r3, 800135a <_read_r+0x1e>
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	200001b8 	.word	0x200001b8

08001360 <_write_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d07      	ldr	r5, [pc, #28]	@ (8001380 <_write_r+0x20>)
 8001364:	4604      	mov	r4, r0
 8001366:	4608      	mov	r0, r1
 8001368:	4611      	mov	r1, r2
 800136a:	2200      	movs	r2, #0
 800136c:	602a      	str	r2, [r5, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f7ff fa03 	bl	800077a <_write>
 8001374:	1c43      	adds	r3, r0, #1
 8001376:	d102      	bne.n	800137e <_write_r+0x1e>
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	b103      	cbz	r3, 800137e <_write_r+0x1e>
 800137c:	6023      	str	r3, [r4, #0]
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	200001b8 	.word	0x200001b8

08001384 <__errno>:
 8001384:	4b01      	ldr	r3, [pc, #4]	@ (800138c <__errno+0x8>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000000c 	.word	0x2000000c

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4d0d      	ldr	r5, [pc, #52]	@ (80013c8 <__libc_init_array+0x38>)
 8001394:	4c0d      	ldr	r4, [pc, #52]	@ (80013cc <__libc_init_array+0x3c>)
 8001396:	1b64      	subs	r4, r4, r5
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	2600      	movs	r6, #0
 800139c:	42a6      	cmp	r6, r4
 800139e:	d109      	bne.n	80013b4 <__libc_init_array+0x24>
 80013a0:	4d0b      	ldr	r5, [pc, #44]	@ (80013d0 <__libc_init_array+0x40>)
 80013a2:	4c0c      	ldr	r4, [pc, #48]	@ (80013d4 <__libc_init_array+0x44>)
 80013a4:	f000 fdb0 	bl	8001f08 <_init>
 80013a8:	1b64      	subs	r4, r4, r5
 80013aa:	10a4      	asrs	r4, r4, #2
 80013ac:	2600      	movs	r6, #0
 80013ae:	42a6      	cmp	r6, r4
 80013b0:	d105      	bne.n	80013be <__libc_init_array+0x2e>
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b8:	4798      	blx	r3
 80013ba:	3601      	adds	r6, #1
 80013bc:	e7ee      	b.n	800139c <__libc_init_array+0xc>
 80013be:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c2:	4798      	blx	r3
 80013c4:	3601      	adds	r6, #1
 80013c6:	e7f2      	b.n	80013ae <__libc_init_array+0x1e>
 80013c8:	08001f80 	.word	0x08001f80
 80013cc:	08001f80 	.word	0x08001f80
 80013d0:	08001f80 	.word	0x08001f80
 80013d4:	08001f84 	.word	0x08001f84

080013d8 <__retarget_lock_init_recursive>:
 80013d8:	4770      	bx	lr

080013da <__retarget_lock_acquire_recursive>:
 80013da:	4770      	bx	lr

080013dc <__retarget_lock_release_recursive>:
 80013dc:	4770      	bx	lr
	...

080013e0 <_free_r>:
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	4605      	mov	r5, r0
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d041      	beq.n	800146c <_free_r+0x8c>
 80013e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013ec:	1f0c      	subs	r4, r1, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bfb8      	it	lt
 80013f2:	18e4      	addlt	r4, r4, r3
 80013f4:	f000 f8e0 	bl	80015b8 <__malloc_lock>
 80013f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <_free_r+0x90>)
 80013fa:	6813      	ldr	r3, [r2, #0]
 80013fc:	b933      	cbnz	r3, 800140c <_free_r+0x2c>
 80013fe:	6063      	str	r3, [r4, #4]
 8001400:	6014      	str	r4, [r2, #0]
 8001402:	4628      	mov	r0, r5
 8001404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001408:	f000 b8dc 	b.w	80015c4 <__malloc_unlock>
 800140c:	42a3      	cmp	r3, r4
 800140e:	d908      	bls.n	8001422 <_free_r+0x42>
 8001410:	6820      	ldr	r0, [r4, #0]
 8001412:	1821      	adds	r1, r4, r0
 8001414:	428b      	cmp	r3, r1
 8001416:	bf01      	itttt	eq
 8001418:	6819      	ldreq	r1, [r3, #0]
 800141a:	685b      	ldreq	r3, [r3, #4]
 800141c:	1809      	addeq	r1, r1, r0
 800141e:	6021      	streq	r1, [r4, #0]
 8001420:	e7ed      	b.n	80013fe <_free_r+0x1e>
 8001422:	461a      	mov	r2, r3
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	b10b      	cbz	r3, 800142c <_free_r+0x4c>
 8001428:	42a3      	cmp	r3, r4
 800142a:	d9fa      	bls.n	8001422 <_free_r+0x42>
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	1850      	adds	r0, r2, r1
 8001430:	42a0      	cmp	r0, r4
 8001432:	d10b      	bne.n	800144c <_free_r+0x6c>
 8001434:	6820      	ldr	r0, [r4, #0]
 8001436:	4401      	add	r1, r0
 8001438:	1850      	adds	r0, r2, r1
 800143a:	4283      	cmp	r3, r0
 800143c:	6011      	str	r1, [r2, #0]
 800143e:	d1e0      	bne.n	8001402 <_free_r+0x22>
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	6053      	str	r3, [r2, #4]
 8001446:	4408      	add	r0, r1
 8001448:	6010      	str	r0, [r2, #0]
 800144a:	e7da      	b.n	8001402 <_free_r+0x22>
 800144c:	d902      	bls.n	8001454 <_free_r+0x74>
 800144e:	230c      	movs	r3, #12
 8001450:	602b      	str	r3, [r5, #0]
 8001452:	e7d6      	b.n	8001402 <_free_r+0x22>
 8001454:	6820      	ldr	r0, [r4, #0]
 8001456:	1821      	adds	r1, r4, r0
 8001458:	428b      	cmp	r3, r1
 800145a:	bf04      	itt	eq
 800145c:	6819      	ldreq	r1, [r3, #0]
 800145e:	685b      	ldreq	r3, [r3, #4]
 8001460:	6063      	str	r3, [r4, #4]
 8001462:	bf04      	itt	eq
 8001464:	1809      	addeq	r1, r1, r0
 8001466:	6021      	streq	r1, [r4, #0]
 8001468:	6054      	str	r4, [r2, #4]
 800146a:	e7ca      	b.n	8001402 <_free_r+0x22>
 800146c:	bd38      	pop	{r3, r4, r5, pc}
 800146e:	bf00      	nop
 8001470:	200001c4 	.word	0x200001c4

08001474 <sbrk_aligned>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	4e0f      	ldr	r6, [pc, #60]	@ (80014b4 <sbrk_aligned+0x40>)
 8001478:	460c      	mov	r4, r1
 800147a:	6831      	ldr	r1, [r6, #0]
 800147c:	4605      	mov	r5, r0
 800147e:	b911      	cbnz	r1, 8001486 <sbrk_aligned+0x12>
 8001480:	f000 fcae 	bl	8001de0 <_sbrk_r>
 8001484:	6030      	str	r0, [r6, #0]
 8001486:	4621      	mov	r1, r4
 8001488:	4628      	mov	r0, r5
 800148a:	f000 fca9 	bl	8001de0 <_sbrk_r>
 800148e:	1c43      	adds	r3, r0, #1
 8001490:	d103      	bne.n	800149a <sbrk_aligned+0x26>
 8001492:	f04f 34ff 	mov.w	r4, #4294967295
 8001496:	4620      	mov	r0, r4
 8001498:	bd70      	pop	{r4, r5, r6, pc}
 800149a:	1cc4      	adds	r4, r0, #3
 800149c:	f024 0403 	bic.w	r4, r4, #3
 80014a0:	42a0      	cmp	r0, r4
 80014a2:	d0f8      	beq.n	8001496 <sbrk_aligned+0x22>
 80014a4:	1a21      	subs	r1, r4, r0
 80014a6:	4628      	mov	r0, r5
 80014a8:	f000 fc9a 	bl	8001de0 <_sbrk_r>
 80014ac:	3001      	adds	r0, #1
 80014ae:	d1f2      	bne.n	8001496 <sbrk_aligned+0x22>
 80014b0:	e7ef      	b.n	8001492 <sbrk_aligned+0x1e>
 80014b2:	bf00      	nop
 80014b4:	200001c0 	.word	0x200001c0

080014b8 <_malloc_r>:
 80014b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014bc:	1ccd      	adds	r5, r1, #3
 80014be:	f025 0503 	bic.w	r5, r5, #3
 80014c2:	3508      	adds	r5, #8
 80014c4:	2d0c      	cmp	r5, #12
 80014c6:	bf38      	it	cc
 80014c8:	250c      	movcc	r5, #12
 80014ca:	2d00      	cmp	r5, #0
 80014cc:	4606      	mov	r6, r0
 80014ce:	db01      	blt.n	80014d4 <_malloc_r+0x1c>
 80014d0:	42a9      	cmp	r1, r5
 80014d2:	d904      	bls.n	80014de <_malloc_r+0x26>
 80014d4:	230c      	movs	r3, #12
 80014d6:	6033      	str	r3, [r6, #0]
 80014d8:	2000      	movs	r0, #0
 80014da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80015b4 <_malloc_r+0xfc>
 80014e2:	f000 f869 	bl	80015b8 <__malloc_lock>
 80014e6:	f8d8 3000 	ldr.w	r3, [r8]
 80014ea:	461c      	mov	r4, r3
 80014ec:	bb44      	cbnz	r4, 8001540 <_malloc_r+0x88>
 80014ee:	4629      	mov	r1, r5
 80014f0:	4630      	mov	r0, r6
 80014f2:	f7ff ffbf 	bl	8001474 <sbrk_aligned>
 80014f6:	1c43      	adds	r3, r0, #1
 80014f8:	4604      	mov	r4, r0
 80014fa:	d158      	bne.n	80015ae <_malloc_r+0xf6>
 80014fc:	f8d8 4000 	ldr.w	r4, [r8]
 8001500:	4627      	mov	r7, r4
 8001502:	2f00      	cmp	r7, #0
 8001504:	d143      	bne.n	800158e <_malloc_r+0xd6>
 8001506:	2c00      	cmp	r4, #0
 8001508:	d04b      	beq.n	80015a2 <_malloc_r+0xea>
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	4639      	mov	r1, r7
 800150e:	4630      	mov	r0, r6
 8001510:	eb04 0903 	add.w	r9, r4, r3
 8001514:	f000 fc64 	bl	8001de0 <_sbrk_r>
 8001518:	4581      	cmp	r9, r0
 800151a:	d142      	bne.n	80015a2 <_malloc_r+0xea>
 800151c:	6821      	ldr	r1, [r4, #0]
 800151e:	1a6d      	subs	r5, r5, r1
 8001520:	4629      	mov	r1, r5
 8001522:	4630      	mov	r0, r6
 8001524:	f7ff ffa6 	bl	8001474 <sbrk_aligned>
 8001528:	3001      	adds	r0, #1
 800152a:	d03a      	beq.n	80015a2 <_malloc_r+0xea>
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	442b      	add	r3, r5
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	f8d8 3000 	ldr.w	r3, [r8]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	bb62      	cbnz	r2, 8001594 <_malloc_r+0xdc>
 800153a:	f8c8 7000 	str.w	r7, [r8]
 800153e:	e00f      	b.n	8001560 <_malloc_r+0xa8>
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	1b52      	subs	r2, r2, r5
 8001544:	d420      	bmi.n	8001588 <_malloc_r+0xd0>
 8001546:	2a0b      	cmp	r2, #11
 8001548:	d917      	bls.n	800157a <_malloc_r+0xc2>
 800154a:	1961      	adds	r1, r4, r5
 800154c:	42a3      	cmp	r3, r4
 800154e:	6025      	str	r5, [r4, #0]
 8001550:	bf18      	it	ne
 8001552:	6059      	strne	r1, [r3, #4]
 8001554:	6863      	ldr	r3, [r4, #4]
 8001556:	bf08      	it	eq
 8001558:	f8c8 1000 	streq.w	r1, [r8]
 800155c:	5162      	str	r2, [r4, r5]
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	4630      	mov	r0, r6
 8001562:	f000 f82f 	bl	80015c4 <__malloc_unlock>
 8001566:	f104 000b 	add.w	r0, r4, #11
 800156a:	1d23      	adds	r3, r4, #4
 800156c:	f020 0007 	bic.w	r0, r0, #7
 8001570:	1ac2      	subs	r2, r0, r3
 8001572:	bf1c      	itt	ne
 8001574:	1a1b      	subne	r3, r3, r0
 8001576:	50a3      	strne	r3, [r4, r2]
 8001578:	e7af      	b.n	80014da <_malloc_r+0x22>
 800157a:	6862      	ldr	r2, [r4, #4]
 800157c:	42a3      	cmp	r3, r4
 800157e:	bf0c      	ite	eq
 8001580:	f8c8 2000 	streq.w	r2, [r8]
 8001584:	605a      	strne	r2, [r3, #4]
 8001586:	e7eb      	b.n	8001560 <_malloc_r+0xa8>
 8001588:	4623      	mov	r3, r4
 800158a:	6864      	ldr	r4, [r4, #4]
 800158c:	e7ae      	b.n	80014ec <_malloc_r+0x34>
 800158e:	463c      	mov	r4, r7
 8001590:	687f      	ldr	r7, [r7, #4]
 8001592:	e7b6      	b.n	8001502 <_malloc_r+0x4a>
 8001594:	461a      	mov	r2, r3
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	42a3      	cmp	r3, r4
 800159a:	d1fb      	bne.n	8001594 <_malloc_r+0xdc>
 800159c:	2300      	movs	r3, #0
 800159e:	6053      	str	r3, [r2, #4]
 80015a0:	e7de      	b.n	8001560 <_malloc_r+0xa8>
 80015a2:	230c      	movs	r3, #12
 80015a4:	6033      	str	r3, [r6, #0]
 80015a6:	4630      	mov	r0, r6
 80015a8:	f000 f80c 	bl	80015c4 <__malloc_unlock>
 80015ac:	e794      	b.n	80014d8 <_malloc_r+0x20>
 80015ae:	6005      	str	r5, [r0, #0]
 80015b0:	e7d6      	b.n	8001560 <_malloc_r+0xa8>
 80015b2:	bf00      	nop
 80015b4:	200001c4 	.word	0x200001c4

080015b8 <__malloc_lock>:
 80015b8:	4801      	ldr	r0, [pc, #4]	@ (80015c0 <__malloc_lock+0x8>)
 80015ba:	f7ff bf0e 	b.w	80013da <__retarget_lock_acquire_recursive>
 80015be:	bf00      	nop
 80015c0:	200001bc 	.word	0x200001bc

080015c4 <__malloc_unlock>:
 80015c4:	4801      	ldr	r0, [pc, #4]	@ (80015cc <__malloc_unlock+0x8>)
 80015c6:	f7ff bf09 	b.w	80013dc <__retarget_lock_release_recursive>
 80015ca:	bf00      	nop
 80015cc:	200001bc 	.word	0x200001bc

080015d0 <__sfputc_r>:
 80015d0:	6893      	ldr	r3, [r2, #8]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	b410      	push	{r4}
 80015d8:	6093      	str	r3, [r2, #8]
 80015da:	da07      	bge.n	80015ec <__sfputc_r+0x1c>
 80015dc:	6994      	ldr	r4, [r2, #24]
 80015de:	42a3      	cmp	r3, r4
 80015e0:	db01      	blt.n	80015e6 <__sfputc_r+0x16>
 80015e2:	290a      	cmp	r1, #10
 80015e4:	d102      	bne.n	80015ec <__sfputc_r+0x1c>
 80015e6:	bc10      	pop	{r4}
 80015e8:	f000 bb66 	b.w	8001cb8 <__swbuf_r>
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	1c58      	adds	r0, r3, #1
 80015f0:	6010      	str	r0, [r2, #0]
 80015f2:	7019      	strb	r1, [r3, #0]
 80015f4:	4608      	mov	r0, r1
 80015f6:	bc10      	pop	{r4}
 80015f8:	4770      	bx	lr

080015fa <__sfputs_r>:
 80015fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fc:	4606      	mov	r6, r0
 80015fe:	460f      	mov	r7, r1
 8001600:	4614      	mov	r4, r2
 8001602:	18d5      	adds	r5, r2, r3
 8001604:	42ac      	cmp	r4, r5
 8001606:	d101      	bne.n	800160c <__sfputs_r+0x12>
 8001608:	2000      	movs	r0, #0
 800160a:	e007      	b.n	800161c <__sfputs_r+0x22>
 800160c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001610:	463a      	mov	r2, r7
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff ffdc 	bl	80015d0 <__sfputc_r>
 8001618:	1c43      	adds	r3, r0, #1
 800161a:	d1f3      	bne.n	8001604 <__sfputs_r+0xa>
 800161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001620 <_vfiprintf_r>:
 8001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001624:	460d      	mov	r5, r1
 8001626:	b09d      	sub	sp, #116	@ 0x74
 8001628:	4614      	mov	r4, r2
 800162a:	4698      	mov	r8, r3
 800162c:	4606      	mov	r6, r0
 800162e:	b118      	cbz	r0, 8001638 <_vfiprintf_r+0x18>
 8001630:	6a03      	ldr	r3, [r0, #32]
 8001632:	b90b      	cbnz	r3, 8001638 <_vfiprintf_r+0x18>
 8001634:	f7ff fdcc 	bl	80011d0 <__sinit>
 8001638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800163a:	07d9      	lsls	r1, r3, #31
 800163c:	d405      	bmi.n	800164a <_vfiprintf_r+0x2a>
 800163e:	89ab      	ldrh	r3, [r5, #12]
 8001640:	059a      	lsls	r2, r3, #22
 8001642:	d402      	bmi.n	800164a <_vfiprintf_r+0x2a>
 8001644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001646:	f7ff fec8 	bl	80013da <__retarget_lock_acquire_recursive>
 800164a:	89ab      	ldrh	r3, [r5, #12]
 800164c:	071b      	lsls	r3, r3, #28
 800164e:	d501      	bpl.n	8001654 <_vfiprintf_r+0x34>
 8001650:	692b      	ldr	r3, [r5, #16]
 8001652:	b99b      	cbnz	r3, 800167c <_vfiprintf_r+0x5c>
 8001654:	4629      	mov	r1, r5
 8001656:	4630      	mov	r0, r6
 8001658:	f000 fb6c 	bl	8001d34 <__swsetup_r>
 800165c:	b170      	cbz	r0, 800167c <_vfiprintf_r+0x5c>
 800165e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001660:	07dc      	lsls	r4, r3, #31
 8001662:	d504      	bpl.n	800166e <_vfiprintf_r+0x4e>
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	b01d      	add	sp, #116	@ 0x74
 800166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800166e:	89ab      	ldrh	r3, [r5, #12]
 8001670:	0598      	lsls	r0, r3, #22
 8001672:	d4f7      	bmi.n	8001664 <_vfiprintf_r+0x44>
 8001674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001676:	f7ff feb1 	bl	80013dc <__retarget_lock_release_recursive>
 800167a:	e7f3      	b.n	8001664 <_vfiprintf_r+0x44>
 800167c:	2300      	movs	r3, #0
 800167e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001680:	2320      	movs	r3, #32
 8001682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001686:	f8cd 800c 	str.w	r8, [sp, #12]
 800168a:	2330      	movs	r3, #48	@ 0x30
 800168c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800183c <_vfiprintf_r+0x21c>
 8001690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001694:	f04f 0901 	mov.w	r9, #1
 8001698:	4623      	mov	r3, r4
 800169a:	469a      	mov	sl, r3
 800169c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016a0:	b10a      	cbz	r2, 80016a6 <_vfiprintf_r+0x86>
 80016a2:	2a25      	cmp	r2, #37	@ 0x25
 80016a4:	d1f9      	bne.n	800169a <_vfiprintf_r+0x7a>
 80016a6:	ebba 0b04 	subs.w	fp, sl, r4
 80016aa:	d00b      	beq.n	80016c4 <_vfiprintf_r+0xa4>
 80016ac:	465b      	mov	r3, fp
 80016ae:	4622      	mov	r2, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	4630      	mov	r0, r6
 80016b4:	f7ff ffa1 	bl	80015fa <__sfputs_r>
 80016b8:	3001      	adds	r0, #1
 80016ba:	f000 80a7 	beq.w	800180c <_vfiprintf_r+0x1ec>
 80016be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80016c0:	445a      	add	r2, fp
 80016c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80016c4:	f89a 3000 	ldrb.w	r3, [sl]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 809f 	beq.w	800180c <_vfiprintf_r+0x1ec>
 80016ce:	2300      	movs	r3, #0
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016d8:	f10a 0a01 	add.w	sl, sl, #1
 80016dc:	9304      	str	r3, [sp, #16]
 80016de:	9307      	str	r3, [sp, #28]
 80016e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80016e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80016e6:	4654      	mov	r4, sl
 80016e8:	2205      	movs	r2, #5
 80016ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ee:	4853      	ldr	r0, [pc, #332]	@ (800183c <_vfiprintf_r+0x21c>)
 80016f0:	f7fe fd76 	bl	80001e0 <memchr>
 80016f4:	9a04      	ldr	r2, [sp, #16]
 80016f6:	b9d8      	cbnz	r0, 8001730 <_vfiprintf_r+0x110>
 80016f8:	06d1      	lsls	r1, r2, #27
 80016fa:	bf44      	itt	mi
 80016fc:	2320      	movmi	r3, #32
 80016fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001702:	0713      	lsls	r3, r2, #28
 8001704:	bf44      	itt	mi
 8001706:	232b      	movmi	r3, #43	@ 0x2b
 8001708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800170c:	f89a 3000 	ldrb.w	r3, [sl]
 8001710:	2b2a      	cmp	r3, #42	@ 0x2a
 8001712:	d015      	beq.n	8001740 <_vfiprintf_r+0x120>
 8001714:	9a07      	ldr	r2, [sp, #28]
 8001716:	4654      	mov	r4, sl
 8001718:	2000      	movs	r0, #0
 800171a:	f04f 0c0a 	mov.w	ip, #10
 800171e:	4621      	mov	r1, r4
 8001720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001724:	3b30      	subs	r3, #48	@ 0x30
 8001726:	2b09      	cmp	r3, #9
 8001728:	d94b      	bls.n	80017c2 <_vfiprintf_r+0x1a2>
 800172a:	b1b0      	cbz	r0, 800175a <_vfiprintf_r+0x13a>
 800172c:	9207      	str	r2, [sp, #28]
 800172e:	e014      	b.n	800175a <_vfiprintf_r+0x13a>
 8001730:	eba0 0308 	sub.w	r3, r0, r8
 8001734:	fa09 f303 	lsl.w	r3, r9, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	9304      	str	r3, [sp, #16]
 800173c:	46a2      	mov	sl, r4
 800173e:	e7d2      	b.n	80016e6 <_vfiprintf_r+0xc6>
 8001740:	9b03      	ldr	r3, [sp, #12]
 8001742:	1d19      	adds	r1, r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	9103      	str	r1, [sp, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	bfbb      	ittet	lt
 800174c:	425b      	neglt	r3, r3
 800174e:	f042 0202 	orrlt.w	r2, r2, #2
 8001752:	9307      	strge	r3, [sp, #28]
 8001754:	9307      	strlt	r3, [sp, #28]
 8001756:	bfb8      	it	lt
 8001758:	9204      	strlt	r2, [sp, #16]
 800175a:	7823      	ldrb	r3, [r4, #0]
 800175c:	2b2e      	cmp	r3, #46	@ 0x2e
 800175e:	d10a      	bne.n	8001776 <_vfiprintf_r+0x156>
 8001760:	7863      	ldrb	r3, [r4, #1]
 8001762:	2b2a      	cmp	r3, #42	@ 0x2a
 8001764:	d132      	bne.n	80017cc <_vfiprintf_r+0x1ac>
 8001766:	9b03      	ldr	r3, [sp, #12]
 8001768:	1d1a      	adds	r2, r3, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	9203      	str	r2, [sp, #12]
 800176e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001772:	3402      	adds	r4, #2
 8001774:	9305      	str	r3, [sp, #20]
 8001776:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001840 <_vfiprintf_r+0x220>
 800177a:	7821      	ldrb	r1, [r4, #0]
 800177c:	2203      	movs	r2, #3
 800177e:	4650      	mov	r0, sl
 8001780:	f7fe fd2e 	bl	80001e0 <memchr>
 8001784:	b138      	cbz	r0, 8001796 <_vfiprintf_r+0x176>
 8001786:	9b04      	ldr	r3, [sp, #16]
 8001788:	eba0 000a 	sub.w	r0, r0, sl
 800178c:	2240      	movs	r2, #64	@ 0x40
 800178e:	4082      	lsls	r2, r0
 8001790:	4313      	orrs	r3, r2
 8001792:	3401      	adds	r4, #1
 8001794:	9304      	str	r3, [sp, #16]
 8001796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800179a:	482a      	ldr	r0, [pc, #168]	@ (8001844 <_vfiprintf_r+0x224>)
 800179c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80017a0:	2206      	movs	r2, #6
 80017a2:	f7fe fd1d 	bl	80001e0 <memchr>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d03f      	beq.n	800182a <_vfiprintf_r+0x20a>
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <_vfiprintf_r+0x228>)
 80017ac:	bb1b      	cbnz	r3, 80017f6 <_vfiprintf_r+0x1d6>
 80017ae:	9b03      	ldr	r3, [sp, #12]
 80017b0:	3307      	adds	r3, #7
 80017b2:	f023 0307 	bic.w	r3, r3, #7
 80017b6:	3308      	adds	r3, #8
 80017b8:	9303      	str	r3, [sp, #12]
 80017ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80017bc:	443b      	add	r3, r7
 80017be:	9309      	str	r3, [sp, #36]	@ 0x24
 80017c0:	e76a      	b.n	8001698 <_vfiprintf_r+0x78>
 80017c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80017c6:	460c      	mov	r4, r1
 80017c8:	2001      	movs	r0, #1
 80017ca:	e7a8      	b.n	800171e <_vfiprintf_r+0xfe>
 80017cc:	2300      	movs	r3, #0
 80017ce:	3401      	adds	r4, #1
 80017d0:	9305      	str	r3, [sp, #20]
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 0c0a 	mov.w	ip, #10
 80017d8:	4620      	mov	r0, r4
 80017da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017de:	3a30      	subs	r2, #48	@ 0x30
 80017e0:	2a09      	cmp	r2, #9
 80017e2:	d903      	bls.n	80017ec <_vfiprintf_r+0x1cc>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0c6      	beq.n	8001776 <_vfiprintf_r+0x156>
 80017e8:	9105      	str	r1, [sp, #20]
 80017ea:	e7c4      	b.n	8001776 <_vfiprintf_r+0x156>
 80017ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80017f0:	4604      	mov	r4, r0
 80017f2:	2301      	movs	r3, #1
 80017f4:	e7f0      	b.n	80017d8 <_vfiprintf_r+0x1b8>
 80017f6:	ab03      	add	r3, sp, #12
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	462a      	mov	r2, r5
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <_vfiprintf_r+0x22c>)
 80017fe:	a904      	add	r1, sp, #16
 8001800:	4630      	mov	r0, r6
 8001802:	f3af 8000 	nop.w
 8001806:	4607      	mov	r7, r0
 8001808:	1c78      	adds	r0, r7, #1
 800180a:	d1d6      	bne.n	80017ba <_vfiprintf_r+0x19a>
 800180c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800180e:	07d9      	lsls	r1, r3, #31
 8001810:	d405      	bmi.n	800181e <_vfiprintf_r+0x1fe>
 8001812:	89ab      	ldrh	r3, [r5, #12]
 8001814:	059a      	lsls	r2, r3, #22
 8001816:	d402      	bmi.n	800181e <_vfiprintf_r+0x1fe>
 8001818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800181a:	f7ff fddf 	bl	80013dc <__retarget_lock_release_recursive>
 800181e:	89ab      	ldrh	r3, [r5, #12]
 8001820:	065b      	lsls	r3, r3, #25
 8001822:	f53f af1f 	bmi.w	8001664 <_vfiprintf_r+0x44>
 8001826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001828:	e71e      	b.n	8001668 <_vfiprintf_r+0x48>
 800182a:	ab03      	add	r3, sp, #12
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	462a      	mov	r2, r5
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <_vfiprintf_r+0x22c>)
 8001832:	a904      	add	r1, sp, #16
 8001834:	4630      	mov	r0, r6
 8001836:	f000 f879 	bl	800192c <_printf_i>
 800183a:	e7e4      	b.n	8001806 <_vfiprintf_r+0x1e6>
 800183c:	08001f42 	.word	0x08001f42
 8001840:	08001f48 	.word	0x08001f48
 8001844:	08001f4c 	.word	0x08001f4c
 8001848:	00000000 	.word	0x00000000
 800184c:	080015fb 	.word	0x080015fb

08001850 <_printf_common>:
 8001850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001854:	4616      	mov	r6, r2
 8001856:	4698      	mov	r8, r3
 8001858:	688a      	ldr	r2, [r1, #8]
 800185a:	690b      	ldr	r3, [r1, #16]
 800185c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001860:	4293      	cmp	r3, r2
 8001862:	bfb8      	it	lt
 8001864:	4613      	movlt	r3, r2
 8001866:	6033      	str	r3, [r6, #0]
 8001868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800186c:	4607      	mov	r7, r0
 800186e:	460c      	mov	r4, r1
 8001870:	b10a      	cbz	r2, 8001876 <_printf_common+0x26>
 8001872:	3301      	adds	r3, #1
 8001874:	6033      	str	r3, [r6, #0]
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	0699      	lsls	r1, r3, #26
 800187a:	bf42      	ittt	mi
 800187c:	6833      	ldrmi	r3, [r6, #0]
 800187e:	3302      	addmi	r3, #2
 8001880:	6033      	strmi	r3, [r6, #0]
 8001882:	6825      	ldr	r5, [r4, #0]
 8001884:	f015 0506 	ands.w	r5, r5, #6
 8001888:	d106      	bne.n	8001898 <_printf_common+0x48>
 800188a:	f104 0a19 	add.w	sl, r4, #25
 800188e:	68e3      	ldr	r3, [r4, #12]
 8001890:	6832      	ldr	r2, [r6, #0]
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	42ab      	cmp	r3, r5
 8001896:	dc26      	bgt.n	80018e6 <_printf_common+0x96>
 8001898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800189c:	6822      	ldr	r2, [r4, #0]
 800189e:	3b00      	subs	r3, #0
 80018a0:	bf18      	it	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	0692      	lsls	r2, r2, #26
 80018a6:	d42b      	bmi.n	8001900 <_printf_common+0xb0>
 80018a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80018ac:	4641      	mov	r1, r8
 80018ae:	4638      	mov	r0, r7
 80018b0:	47c8      	blx	r9
 80018b2:	3001      	adds	r0, #1
 80018b4:	d01e      	beq.n	80018f4 <_printf_common+0xa4>
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	6922      	ldr	r2, [r4, #16]
 80018ba:	f003 0306 	and.w	r3, r3, #6
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf02      	ittt	eq
 80018c2:	68e5      	ldreq	r5, [r4, #12]
 80018c4:	6833      	ldreq	r3, [r6, #0]
 80018c6:	1aed      	subeq	r5, r5, r3
 80018c8:	68a3      	ldr	r3, [r4, #8]
 80018ca:	bf0c      	ite	eq
 80018cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018d0:	2500      	movne	r5, #0
 80018d2:	4293      	cmp	r3, r2
 80018d4:	bfc4      	itt	gt
 80018d6:	1a9b      	subgt	r3, r3, r2
 80018d8:	18ed      	addgt	r5, r5, r3
 80018da:	2600      	movs	r6, #0
 80018dc:	341a      	adds	r4, #26
 80018de:	42b5      	cmp	r5, r6
 80018e0:	d11a      	bne.n	8001918 <_printf_common+0xc8>
 80018e2:	2000      	movs	r0, #0
 80018e4:	e008      	b.n	80018f8 <_printf_common+0xa8>
 80018e6:	2301      	movs	r3, #1
 80018e8:	4652      	mov	r2, sl
 80018ea:	4641      	mov	r1, r8
 80018ec:	4638      	mov	r0, r7
 80018ee:	47c8      	blx	r9
 80018f0:	3001      	adds	r0, #1
 80018f2:	d103      	bne.n	80018fc <_printf_common+0xac>
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018fc:	3501      	adds	r5, #1
 80018fe:	e7c6      	b.n	800188e <_printf_common+0x3e>
 8001900:	18e1      	adds	r1, r4, r3
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	2030      	movs	r0, #48	@ 0x30
 8001906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800190a:	4422      	add	r2, r4
 800190c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001914:	3302      	adds	r3, #2
 8001916:	e7c7      	b.n	80018a8 <_printf_common+0x58>
 8001918:	2301      	movs	r3, #1
 800191a:	4622      	mov	r2, r4
 800191c:	4641      	mov	r1, r8
 800191e:	4638      	mov	r0, r7
 8001920:	47c8      	blx	r9
 8001922:	3001      	adds	r0, #1
 8001924:	d0e6      	beq.n	80018f4 <_printf_common+0xa4>
 8001926:	3601      	adds	r6, #1
 8001928:	e7d9      	b.n	80018de <_printf_common+0x8e>
	...

0800192c <_printf_i>:
 800192c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001930:	7e0f      	ldrb	r7, [r1, #24]
 8001932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001934:	2f78      	cmp	r7, #120	@ 0x78
 8001936:	4691      	mov	r9, r2
 8001938:	4680      	mov	r8, r0
 800193a:	460c      	mov	r4, r1
 800193c:	469a      	mov	sl, r3
 800193e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001942:	d807      	bhi.n	8001954 <_printf_i+0x28>
 8001944:	2f62      	cmp	r7, #98	@ 0x62
 8001946:	d80a      	bhi.n	800195e <_printf_i+0x32>
 8001948:	2f00      	cmp	r7, #0
 800194a:	f000 80d1 	beq.w	8001af0 <_printf_i+0x1c4>
 800194e:	2f58      	cmp	r7, #88	@ 0x58
 8001950:	f000 80b8 	beq.w	8001ac4 <_printf_i+0x198>
 8001954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800195c:	e03a      	b.n	80019d4 <_printf_i+0xa8>
 800195e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001962:	2b15      	cmp	r3, #21
 8001964:	d8f6      	bhi.n	8001954 <_printf_i+0x28>
 8001966:	a101      	add	r1, pc, #4	@ (adr r1, 800196c <_printf_i+0x40>)
 8001968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800196c:	080019c5 	.word	0x080019c5
 8001970:	080019d9 	.word	0x080019d9
 8001974:	08001955 	.word	0x08001955
 8001978:	08001955 	.word	0x08001955
 800197c:	08001955 	.word	0x08001955
 8001980:	08001955 	.word	0x08001955
 8001984:	080019d9 	.word	0x080019d9
 8001988:	08001955 	.word	0x08001955
 800198c:	08001955 	.word	0x08001955
 8001990:	08001955 	.word	0x08001955
 8001994:	08001955 	.word	0x08001955
 8001998:	08001ad7 	.word	0x08001ad7
 800199c:	08001a03 	.word	0x08001a03
 80019a0:	08001a91 	.word	0x08001a91
 80019a4:	08001955 	.word	0x08001955
 80019a8:	08001955 	.word	0x08001955
 80019ac:	08001af9 	.word	0x08001af9
 80019b0:	08001955 	.word	0x08001955
 80019b4:	08001a03 	.word	0x08001a03
 80019b8:	08001955 	.word	0x08001955
 80019bc:	08001955 	.word	0x08001955
 80019c0:	08001a99 	.word	0x08001a99
 80019c4:	6833      	ldr	r3, [r6, #0]
 80019c6:	1d1a      	adds	r2, r3, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6032      	str	r2, [r6, #0]
 80019cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80019d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019d4:	2301      	movs	r3, #1
 80019d6:	e09c      	b.n	8001b12 <_printf_i+0x1e6>
 80019d8:	6833      	ldr	r3, [r6, #0]
 80019da:	6820      	ldr	r0, [r4, #0]
 80019dc:	1d19      	adds	r1, r3, #4
 80019de:	6031      	str	r1, [r6, #0]
 80019e0:	0606      	lsls	r6, r0, #24
 80019e2:	d501      	bpl.n	80019e8 <_printf_i+0xbc>
 80019e4:	681d      	ldr	r5, [r3, #0]
 80019e6:	e003      	b.n	80019f0 <_printf_i+0xc4>
 80019e8:	0645      	lsls	r5, r0, #25
 80019ea:	d5fb      	bpl.n	80019e4 <_printf_i+0xb8>
 80019ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	da03      	bge.n	80019fc <_printf_i+0xd0>
 80019f4:	232d      	movs	r3, #45	@ 0x2d
 80019f6:	426d      	negs	r5, r5
 80019f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019fc:	4858      	ldr	r0, [pc, #352]	@ (8001b60 <_printf_i+0x234>)
 80019fe:	230a      	movs	r3, #10
 8001a00:	e011      	b.n	8001a26 <_printf_i+0xfa>
 8001a02:	6821      	ldr	r1, [r4, #0]
 8001a04:	6833      	ldr	r3, [r6, #0]
 8001a06:	0608      	lsls	r0, r1, #24
 8001a08:	f853 5b04 	ldr.w	r5, [r3], #4
 8001a0c:	d402      	bmi.n	8001a14 <_printf_i+0xe8>
 8001a0e:	0649      	lsls	r1, r1, #25
 8001a10:	bf48      	it	mi
 8001a12:	b2ad      	uxthmi	r5, r5
 8001a14:	2f6f      	cmp	r7, #111	@ 0x6f
 8001a16:	4852      	ldr	r0, [pc, #328]	@ (8001b60 <_printf_i+0x234>)
 8001a18:	6033      	str	r3, [r6, #0]
 8001a1a:	bf14      	ite	ne
 8001a1c:	230a      	movne	r3, #10
 8001a1e:	2308      	moveq	r3, #8
 8001a20:	2100      	movs	r1, #0
 8001a22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001a26:	6866      	ldr	r6, [r4, #4]
 8001a28:	60a6      	str	r6, [r4, #8]
 8001a2a:	2e00      	cmp	r6, #0
 8001a2c:	db05      	blt.n	8001a3a <_printf_i+0x10e>
 8001a2e:	6821      	ldr	r1, [r4, #0]
 8001a30:	432e      	orrs	r6, r5
 8001a32:	f021 0104 	bic.w	r1, r1, #4
 8001a36:	6021      	str	r1, [r4, #0]
 8001a38:	d04b      	beq.n	8001ad2 <_printf_i+0x1a6>
 8001a3a:	4616      	mov	r6, r2
 8001a3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a40:	fb03 5711 	mls	r7, r3, r1, r5
 8001a44:	5dc7      	ldrb	r7, [r0, r7]
 8001a46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a4a:	462f      	mov	r7, r5
 8001a4c:	42bb      	cmp	r3, r7
 8001a4e:	460d      	mov	r5, r1
 8001a50:	d9f4      	bls.n	8001a3c <_printf_i+0x110>
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d10b      	bne.n	8001a6e <_printf_i+0x142>
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	07df      	lsls	r7, r3, #31
 8001a5a:	d508      	bpl.n	8001a6e <_printf_i+0x142>
 8001a5c:	6923      	ldr	r3, [r4, #16]
 8001a5e:	6861      	ldr	r1, [r4, #4]
 8001a60:	4299      	cmp	r1, r3
 8001a62:	bfde      	ittt	le
 8001a64:	2330      	movle	r3, #48	@ 0x30
 8001a66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001a6e:	1b92      	subs	r2, r2, r6
 8001a70:	6122      	str	r2, [r4, #16]
 8001a72:	f8cd a000 	str.w	sl, [sp]
 8001a76:	464b      	mov	r3, r9
 8001a78:	aa03      	add	r2, sp, #12
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	f7ff fee7 	bl	8001850 <_printf_common>
 8001a82:	3001      	adds	r0, #1
 8001a84:	d14a      	bne.n	8001b1c <_printf_i+0x1f0>
 8001a86:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8a:	b004      	add	sp, #16
 8001a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	f043 0320 	orr.w	r3, r3, #32
 8001a96:	6023      	str	r3, [r4, #0]
 8001a98:	4832      	ldr	r0, [pc, #200]	@ (8001b64 <_printf_i+0x238>)
 8001a9a:	2778      	movs	r7, #120	@ 0x78
 8001a9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	6831      	ldr	r1, [r6, #0]
 8001aa4:	061f      	lsls	r7, r3, #24
 8001aa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8001aaa:	d402      	bmi.n	8001ab2 <_printf_i+0x186>
 8001aac:	065f      	lsls	r7, r3, #25
 8001aae:	bf48      	it	mi
 8001ab0:	b2ad      	uxthmi	r5, r5
 8001ab2:	6031      	str	r1, [r6, #0]
 8001ab4:	07d9      	lsls	r1, r3, #31
 8001ab6:	bf44      	itt	mi
 8001ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8001abc:	6023      	strmi	r3, [r4, #0]
 8001abe:	b11d      	cbz	r5, 8001ac8 <_printf_i+0x19c>
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	e7ad      	b.n	8001a20 <_printf_i+0xf4>
 8001ac4:	4826      	ldr	r0, [pc, #152]	@ (8001b60 <_printf_i+0x234>)
 8001ac6:	e7e9      	b.n	8001a9c <_printf_i+0x170>
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	f023 0320 	bic.w	r3, r3, #32
 8001ace:	6023      	str	r3, [r4, #0]
 8001ad0:	e7f6      	b.n	8001ac0 <_printf_i+0x194>
 8001ad2:	4616      	mov	r6, r2
 8001ad4:	e7bd      	b.n	8001a52 <_printf_i+0x126>
 8001ad6:	6833      	ldr	r3, [r6, #0]
 8001ad8:	6825      	ldr	r5, [r4, #0]
 8001ada:	6961      	ldr	r1, [r4, #20]
 8001adc:	1d18      	adds	r0, r3, #4
 8001ade:	6030      	str	r0, [r6, #0]
 8001ae0:	062e      	lsls	r6, r5, #24
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	d501      	bpl.n	8001aea <_printf_i+0x1be>
 8001ae6:	6019      	str	r1, [r3, #0]
 8001ae8:	e002      	b.n	8001af0 <_printf_i+0x1c4>
 8001aea:	0668      	lsls	r0, r5, #25
 8001aec:	d5fb      	bpl.n	8001ae6 <_printf_i+0x1ba>
 8001aee:	8019      	strh	r1, [r3, #0]
 8001af0:	2300      	movs	r3, #0
 8001af2:	6123      	str	r3, [r4, #16]
 8001af4:	4616      	mov	r6, r2
 8001af6:	e7bc      	b.n	8001a72 <_printf_i+0x146>
 8001af8:	6833      	ldr	r3, [r6, #0]
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	6032      	str	r2, [r6, #0]
 8001afe:	681e      	ldr	r6, [r3, #0]
 8001b00:	6862      	ldr	r2, [r4, #4]
 8001b02:	2100      	movs	r1, #0
 8001b04:	4630      	mov	r0, r6
 8001b06:	f7fe fb6b 	bl	80001e0 <memchr>
 8001b0a:	b108      	cbz	r0, 8001b10 <_printf_i+0x1e4>
 8001b0c:	1b80      	subs	r0, r0, r6
 8001b0e:	6060      	str	r0, [r4, #4]
 8001b10:	6863      	ldr	r3, [r4, #4]
 8001b12:	6123      	str	r3, [r4, #16]
 8001b14:	2300      	movs	r3, #0
 8001b16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b1a:	e7aa      	b.n	8001a72 <_printf_i+0x146>
 8001b1c:	6923      	ldr	r3, [r4, #16]
 8001b1e:	4632      	mov	r2, r6
 8001b20:	4649      	mov	r1, r9
 8001b22:	4640      	mov	r0, r8
 8001b24:	47d0      	blx	sl
 8001b26:	3001      	adds	r0, #1
 8001b28:	d0ad      	beq.n	8001a86 <_printf_i+0x15a>
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	079b      	lsls	r3, r3, #30
 8001b2e:	d413      	bmi.n	8001b58 <_printf_i+0x22c>
 8001b30:	68e0      	ldr	r0, [r4, #12]
 8001b32:	9b03      	ldr	r3, [sp, #12]
 8001b34:	4298      	cmp	r0, r3
 8001b36:	bfb8      	it	lt
 8001b38:	4618      	movlt	r0, r3
 8001b3a:	e7a6      	b.n	8001a8a <_printf_i+0x15e>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	4632      	mov	r2, r6
 8001b40:	4649      	mov	r1, r9
 8001b42:	4640      	mov	r0, r8
 8001b44:	47d0      	blx	sl
 8001b46:	3001      	adds	r0, #1
 8001b48:	d09d      	beq.n	8001a86 <_printf_i+0x15a>
 8001b4a:	3501      	adds	r5, #1
 8001b4c:	68e3      	ldr	r3, [r4, #12]
 8001b4e:	9903      	ldr	r1, [sp, #12]
 8001b50:	1a5b      	subs	r3, r3, r1
 8001b52:	42ab      	cmp	r3, r5
 8001b54:	dcf2      	bgt.n	8001b3c <_printf_i+0x210>
 8001b56:	e7eb      	b.n	8001b30 <_printf_i+0x204>
 8001b58:	2500      	movs	r5, #0
 8001b5a:	f104 0619 	add.w	r6, r4, #25
 8001b5e:	e7f5      	b.n	8001b4c <_printf_i+0x220>
 8001b60:	08001f53 	.word	0x08001f53
 8001b64:	08001f64 	.word	0x08001f64

08001b68 <__sflush_r>:
 8001b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	0716      	lsls	r6, r2, #28
 8001b70:	4605      	mov	r5, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	d454      	bmi.n	8001c20 <__sflush_r+0xb8>
 8001b76:	684b      	ldr	r3, [r1, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	dc02      	bgt.n	8001b82 <__sflush_r+0x1a>
 8001b7c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	dd48      	ble.n	8001c14 <__sflush_r+0xac>
 8001b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b84:	2e00      	cmp	r6, #0
 8001b86:	d045      	beq.n	8001c14 <__sflush_r+0xac>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b8e:	682f      	ldr	r7, [r5, #0]
 8001b90:	6a21      	ldr	r1, [r4, #32]
 8001b92:	602b      	str	r3, [r5, #0]
 8001b94:	d030      	beq.n	8001bf8 <__sflush_r+0x90>
 8001b96:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b98:	89a3      	ldrh	r3, [r4, #12]
 8001b9a:	0759      	lsls	r1, r3, #29
 8001b9c:	d505      	bpl.n	8001baa <__sflush_r+0x42>
 8001b9e:	6863      	ldr	r3, [r4, #4]
 8001ba0:	1ad2      	subs	r2, r2, r3
 8001ba2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ba4:	b10b      	cbz	r3, 8001baa <__sflush_r+0x42>
 8001ba6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ba8:	1ad2      	subs	r2, r2, r3
 8001baa:	2300      	movs	r3, #0
 8001bac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001bae:	6a21      	ldr	r1, [r4, #32]
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	47b0      	blx	r6
 8001bb4:	1c43      	adds	r3, r0, #1
 8001bb6:	89a3      	ldrh	r3, [r4, #12]
 8001bb8:	d106      	bne.n	8001bc8 <__sflush_r+0x60>
 8001bba:	6829      	ldr	r1, [r5, #0]
 8001bbc:	291d      	cmp	r1, #29
 8001bbe:	d82b      	bhi.n	8001c18 <__sflush_r+0xb0>
 8001bc0:	4a28      	ldr	r2, [pc, #160]	@ (8001c64 <__sflush_r+0xfc>)
 8001bc2:	40ca      	lsrs	r2, r1
 8001bc4:	07d6      	lsls	r6, r2, #31
 8001bc6:	d527      	bpl.n	8001c18 <__sflush_r+0xb0>
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6062      	str	r2, [r4, #4]
 8001bcc:	04d9      	lsls	r1, r3, #19
 8001bce:	6922      	ldr	r2, [r4, #16]
 8001bd0:	6022      	str	r2, [r4, #0]
 8001bd2:	d504      	bpl.n	8001bde <__sflush_r+0x76>
 8001bd4:	1c42      	adds	r2, r0, #1
 8001bd6:	d101      	bne.n	8001bdc <__sflush_r+0x74>
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	b903      	cbnz	r3, 8001bde <__sflush_r+0x76>
 8001bdc:	6560      	str	r0, [r4, #84]	@ 0x54
 8001bde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001be0:	602f      	str	r7, [r5, #0]
 8001be2:	b1b9      	cbz	r1, 8001c14 <__sflush_r+0xac>
 8001be4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001be8:	4299      	cmp	r1, r3
 8001bea:	d002      	beq.n	8001bf2 <__sflush_r+0x8a>
 8001bec:	4628      	mov	r0, r5
 8001bee:	f7ff fbf7 	bl	80013e0 <_free_r>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bf6:	e00d      	b.n	8001c14 <__sflush_r+0xac>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	47b0      	blx	r6
 8001bfe:	4602      	mov	r2, r0
 8001c00:	1c50      	adds	r0, r2, #1
 8001c02:	d1c9      	bne.n	8001b98 <__sflush_r+0x30>
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0c6      	beq.n	8001b98 <__sflush_r+0x30>
 8001c0a:	2b1d      	cmp	r3, #29
 8001c0c:	d001      	beq.n	8001c12 <__sflush_r+0xaa>
 8001c0e:	2b16      	cmp	r3, #22
 8001c10:	d11d      	bne.n	8001c4e <__sflush_r+0xe6>
 8001c12:	602f      	str	r7, [r5, #0]
 8001c14:	2000      	movs	r0, #0
 8001c16:	e021      	b.n	8001c5c <__sflush_r+0xf4>
 8001c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	e01a      	b.n	8001c56 <__sflush_r+0xee>
 8001c20:	690f      	ldr	r7, [r1, #16]
 8001c22:	2f00      	cmp	r7, #0
 8001c24:	d0f6      	beq.n	8001c14 <__sflush_r+0xac>
 8001c26:	0793      	lsls	r3, r2, #30
 8001c28:	680e      	ldr	r6, [r1, #0]
 8001c2a:	bf08      	it	eq
 8001c2c:	694b      	ldreq	r3, [r1, #20]
 8001c2e:	600f      	str	r7, [r1, #0]
 8001c30:	bf18      	it	ne
 8001c32:	2300      	movne	r3, #0
 8001c34:	1bf6      	subs	r6, r6, r7
 8001c36:	608b      	str	r3, [r1, #8]
 8001c38:	2e00      	cmp	r6, #0
 8001c3a:	ddeb      	ble.n	8001c14 <__sflush_r+0xac>
 8001c3c:	6a21      	ldr	r1, [r4, #32]
 8001c3e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001c42:	4633      	mov	r3, r6
 8001c44:	463a      	mov	r2, r7
 8001c46:	4628      	mov	r0, r5
 8001c48:	47e0      	blx	ip
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	dc07      	bgt.n	8001c5e <__sflush_r+0xf6>
 8001c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c56:	81a3      	strh	r3, [r4, #12]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c5e:	4407      	add	r7, r0
 8001c60:	1a36      	subs	r6, r6, r0
 8001c62:	e7e9      	b.n	8001c38 <__sflush_r+0xd0>
 8001c64:	20400001 	.word	0x20400001

08001c68 <_fflush_r>:
 8001c68:	b538      	push	{r3, r4, r5, lr}
 8001c6a:	690b      	ldr	r3, [r1, #16]
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	b913      	cbnz	r3, 8001c78 <_fflush_r+0x10>
 8001c72:	2500      	movs	r5, #0
 8001c74:	4628      	mov	r0, r5
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
 8001c78:	b118      	cbz	r0, 8001c82 <_fflush_r+0x1a>
 8001c7a:	6a03      	ldr	r3, [r0, #32]
 8001c7c:	b90b      	cbnz	r3, 8001c82 <_fflush_r+0x1a>
 8001c7e:	f7ff faa7 	bl	80011d0 <__sinit>
 8001c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f3      	beq.n	8001c72 <_fflush_r+0xa>
 8001c8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c8c:	07d0      	lsls	r0, r2, #31
 8001c8e:	d404      	bmi.n	8001c9a <_fflush_r+0x32>
 8001c90:	0599      	lsls	r1, r3, #22
 8001c92:	d402      	bmi.n	8001c9a <_fflush_r+0x32>
 8001c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c96:	f7ff fba0 	bl	80013da <__retarget_lock_acquire_recursive>
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	f7ff ff63 	bl	8001b68 <__sflush_r>
 8001ca2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ca4:	07da      	lsls	r2, r3, #31
 8001ca6:	4605      	mov	r5, r0
 8001ca8:	d4e4      	bmi.n	8001c74 <_fflush_r+0xc>
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	059b      	lsls	r3, r3, #22
 8001cae:	d4e1      	bmi.n	8001c74 <_fflush_r+0xc>
 8001cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cb2:	f7ff fb93 	bl	80013dc <__retarget_lock_release_recursive>
 8001cb6:	e7dd      	b.n	8001c74 <_fflush_r+0xc>

08001cb8 <__swbuf_r>:
 8001cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cba:	460e      	mov	r6, r1
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	4605      	mov	r5, r0
 8001cc0:	b118      	cbz	r0, 8001cca <__swbuf_r+0x12>
 8001cc2:	6a03      	ldr	r3, [r0, #32]
 8001cc4:	b90b      	cbnz	r3, 8001cca <__swbuf_r+0x12>
 8001cc6:	f7ff fa83 	bl	80011d0 <__sinit>
 8001cca:	69a3      	ldr	r3, [r4, #24]
 8001ccc:	60a3      	str	r3, [r4, #8]
 8001cce:	89a3      	ldrh	r3, [r4, #12]
 8001cd0:	071a      	lsls	r2, r3, #28
 8001cd2:	d501      	bpl.n	8001cd8 <__swbuf_r+0x20>
 8001cd4:	6923      	ldr	r3, [r4, #16]
 8001cd6:	b943      	cbnz	r3, 8001cea <__swbuf_r+0x32>
 8001cd8:	4621      	mov	r1, r4
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f000 f82a 	bl	8001d34 <__swsetup_r>
 8001ce0:	b118      	cbz	r0, 8001cea <__swbuf_r+0x32>
 8001ce2:	f04f 37ff 	mov.w	r7, #4294967295
 8001ce6:	4638      	mov	r0, r7
 8001ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	6922      	ldr	r2, [r4, #16]
 8001cee:	1a98      	subs	r0, r3, r2
 8001cf0:	6963      	ldr	r3, [r4, #20]
 8001cf2:	b2f6      	uxtb	r6, r6
 8001cf4:	4283      	cmp	r3, r0
 8001cf6:	4637      	mov	r7, r6
 8001cf8:	dc05      	bgt.n	8001d06 <__swbuf_r+0x4e>
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f7ff ffb3 	bl	8001c68 <_fflush_r>
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d1ed      	bne.n	8001ce2 <__swbuf_r+0x2a>
 8001d06:	68a3      	ldr	r3, [r4, #8]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60a3      	str	r3, [r4, #8]
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	6022      	str	r2, [r4, #0]
 8001d12:	701e      	strb	r6, [r3, #0]
 8001d14:	6962      	ldr	r2, [r4, #20]
 8001d16:	1c43      	adds	r3, r0, #1
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d004      	beq.n	8001d26 <__swbuf_r+0x6e>
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	07db      	lsls	r3, r3, #31
 8001d20:	d5e1      	bpl.n	8001ce6 <__swbuf_r+0x2e>
 8001d22:	2e0a      	cmp	r6, #10
 8001d24:	d1df      	bne.n	8001ce6 <__swbuf_r+0x2e>
 8001d26:	4621      	mov	r1, r4
 8001d28:	4628      	mov	r0, r5
 8001d2a:	f7ff ff9d 	bl	8001c68 <_fflush_r>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d0d9      	beq.n	8001ce6 <__swbuf_r+0x2e>
 8001d32:	e7d6      	b.n	8001ce2 <__swbuf_r+0x2a>

08001d34 <__swsetup_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <__swsetup_r+0xa8>)
 8001d38:	4605      	mov	r5, r0
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	b118      	cbz	r0, 8001d48 <__swsetup_r+0x14>
 8001d40:	6a03      	ldr	r3, [r0, #32]
 8001d42:	b90b      	cbnz	r3, 8001d48 <__swsetup_r+0x14>
 8001d44:	f7ff fa44 	bl	80011d0 <__sinit>
 8001d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d4c:	0719      	lsls	r1, r3, #28
 8001d4e:	d422      	bmi.n	8001d96 <__swsetup_r+0x62>
 8001d50:	06da      	lsls	r2, r3, #27
 8001d52:	d407      	bmi.n	8001d64 <__swsetup_r+0x30>
 8001d54:	2209      	movs	r2, #9
 8001d56:	602a      	str	r2, [r5, #0]
 8001d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5c:	81a3      	strh	r3, [r4, #12]
 8001d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d62:	e033      	b.n	8001dcc <__swsetup_r+0x98>
 8001d64:	0758      	lsls	r0, r3, #29
 8001d66:	d512      	bpl.n	8001d8e <__swsetup_r+0x5a>
 8001d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d6a:	b141      	cbz	r1, 8001d7e <__swsetup_r+0x4a>
 8001d6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d70:	4299      	cmp	r1, r3
 8001d72:	d002      	beq.n	8001d7a <__swsetup_r+0x46>
 8001d74:	4628      	mov	r0, r5
 8001d76:	f7ff fb33 	bl	80013e0 <_free_r>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d7e:	89a3      	ldrh	r3, [r4, #12]
 8001d80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d84:	81a3      	strh	r3, [r4, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	6063      	str	r3, [r4, #4]
 8001d8a:	6923      	ldr	r3, [r4, #16]
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	81a3      	strh	r3, [r4, #12]
 8001d96:	6923      	ldr	r3, [r4, #16]
 8001d98:	b94b      	cbnz	r3, 8001dae <__swsetup_r+0x7a>
 8001d9a:	89a3      	ldrh	r3, [r4, #12]
 8001d9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da4:	d003      	beq.n	8001dae <__swsetup_r+0x7a>
 8001da6:	4621      	mov	r1, r4
 8001da8:	4628      	mov	r0, r5
 8001daa:	f000 f84f 	bl	8001e4c <__smakebuf_r>
 8001dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db2:	f013 0201 	ands.w	r2, r3, #1
 8001db6:	d00a      	beq.n	8001dce <__swsetup_r+0x9a>
 8001db8:	2200      	movs	r2, #0
 8001dba:	60a2      	str	r2, [r4, #8]
 8001dbc:	6962      	ldr	r2, [r4, #20]
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	61a2      	str	r2, [r4, #24]
 8001dc2:	6922      	ldr	r2, [r4, #16]
 8001dc4:	b942      	cbnz	r2, 8001dd8 <__swsetup_r+0xa4>
 8001dc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001dca:	d1c5      	bne.n	8001d58 <__swsetup_r+0x24>
 8001dcc:	bd38      	pop	{r3, r4, r5, pc}
 8001dce:	0799      	lsls	r1, r3, #30
 8001dd0:	bf58      	it	pl
 8001dd2:	6962      	ldrpl	r2, [r4, #20]
 8001dd4:	60a2      	str	r2, [r4, #8]
 8001dd6:	e7f4      	b.n	8001dc2 <__swsetup_r+0x8e>
 8001dd8:	2000      	movs	r0, #0
 8001dda:	e7f7      	b.n	8001dcc <__swsetup_r+0x98>
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <_sbrk_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4d06      	ldr	r5, [pc, #24]	@ (8001dfc <_sbrk_r+0x1c>)
 8001de4:	2300      	movs	r3, #0
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	602b      	str	r3, [r5, #0]
 8001dec:	f7fe fd12 	bl	8000814 <_sbrk>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d102      	bne.n	8001dfa <_sbrk_r+0x1a>
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	b103      	cbz	r3, 8001dfa <_sbrk_r+0x1a>
 8001df8:	6023      	str	r3, [r4, #0]
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	200001b8 	.word	0x200001b8

08001e00 <__swhatbuf_r>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	460c      	mov	r4, r1
 8001e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e08:	2900      	cmp	r1, #0
 8001e0a:	b096      	sub	sp, #88	@ 0x58
 8001e0c:	4615      	mov	r5, r2
 8001e0e:	461e      	mov	r6, r3
 8001e10:	da0d      	bge.n	8001e2e <__swhatbuf_r+0x2e>
 8001e12:	89a3      	ldrh	r3, [r4, #12]
 8001e14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	bf14      	ite	ne
 8001e1e:	2340      	movne	r3, #64	@ 0x40
 8001e20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001e24:	2000      	movs	r0, #0
 8001e26:	6031      	str	r1, [r6, #0]
 8001e28:	602b      	str	r3, [r5, #0]
 8001e2a:	b016      	add	sp, #88	@ 0x58
 8001e2c:	bd70      	pop	{r4, r5, r6, pc}
 8001e2e:	466a      	mov	r2, sp
 8001e30:	f000 f848 	bl	8001ec4 <_fstat_r>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	dbec      	blt.n	8001e12 <__swhatbuf_r+0x12>
 8001e38:	9901      	ldr	r1, [sp, #4]
 8001e3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e42:	4259      	negs	r1, r3
 8001e44:	4159      	adcs	r1, r3
 8001e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e4a:	e7eb      	b.n	8001e24 <__swhatbuf_r+0x24>

08001e4c <__smakebuf_r>:
 8001e4c:	898b      	ldrh	r3, [r1, #12]
 8001e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e50:	079d      	lsls	r5, r3, #30
 8001e52:	4606      	mov	r6, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	d507      	bpl.n	8001e68 <__smakebuf_r+0x1c>
 8001e58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e5c:	6023      	str	r3, [r4, #0]
 8001e5e:	6123      	str	r3, [r4, #16]
 8001e60:	2301      	movs	r3, #1
 8001e62:	6163      	str	r3, [r4, #20]
 8001e64:	b003      	add	sp, #12
 8001e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e68:	ab01      	add	r3, sp, #4
 8001e6a:	466a      	mov	r2, sp
 8001e6c:	f7ff ffc8 	bl	8001e00 <__swhatbuf_r>
 8001e70:	9f00      	ldr	r7, [sp, #0]
 8001e72:	4605      	mov	r5, r0
 8001e74:	4639      	mov	r1, r7
 8001e76:	4630      	mov	r0, r6
 8001e78:	f7ff fb1e 	bl	80014b8 <_malloc_r>
 8001e7c:	b948      	cbnz	r0, 8001e92 <__smakebuf_r+0x46>
 8001e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e82:	059a      	lsls	r2, r3, #22
 8001e84:	d4ee      	bmi.n	8001e64 <__smakebuf_r+0x18>
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	81a3      	strh	r3, [r4, #12]
 8001e90:	e7e2      	b.n	8001e58 <__smakebuf_r+0xc>
 8001e92:	89a3      	ldrh	r3, [r4, #12]
 8001e94:	6020      	str	r0, [r4, #0]
 8001e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e9a:	81a3      	strh	r3, [r4, #12]
 8001e9c:	9b01      	ldr	r3, [sp, #4]
 8001e9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ea2:	b15b      	cbz	r3, 8001ebc <__smakebuf_r+0x70>
 8001ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f000 f81d 	bl	8001ee8 <_isatty_r>
 8001eae:	b128      	cbz	r0, 8001ebc <__smakebuf_r+0x70>
 8001eb0:	89a3      	ldrh	r3, [r4, #12]
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	81a3      	strh	r3, [r4, #12]
 8001ebc:	89a3      	ldrh	r3, [r4, #12]
 8001ebe:	431d      	orrs	r5, r3
 8001ec0:	81a5      	strh	r5, [r4, #12]
 8001ec2:	e7cf      	b.n	8001e64 <__smakebuf_r+0x18>

08001ec4 <_fstat_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4d07      	ldr	r5, [pc, #28]	@ (8001ee4 <_fstat_r+0x20>)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4604      	mov	r4, r0
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	602b      	str	r3, [r5, #0]
 8001ed2:	f7fe fc79 	bl	80007c8 <_fstat>
 8001ed6:	1c43      	adds	r3, r0, #1
 8001ed8:	d102      	bne.n	8001ee0 <_fstat_r+0x1c>
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	b103      	cbz	r3, 8001ee0 <_fstat_r+0x1c>
 8001ede:	6023      	str	r3, [r4, #0]
 8001ee0:	bd38      	pop	{r3, r4, r5, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001b8 	.word	0x200001b8

08001ee8 <_isatty_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4d06      	ldr	r5, [pc, #24]	@ (8001f04 <_isatty_r+0x1c>)
 8001eec:	2300      	movs	r3, #0
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	602b      	str	r3, [r5, #0]
 8001ef4:	f7fe fc77 	bl	80007e6 <_isatty>
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d102      	bne.n	8001f02 <_isatty_r+0x1a>
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	b103      	cbz	r3, 8001f02 <_isatty_r+0x1a>
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	200001b8 	.word	0x200001b8

08001f08 <_init>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	bf00      	nop
 8001f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0e:	bc08      	pop	{r3}
 8001f10:	469e      	mov	lr, r3
 8001f12:	4770      	bx	lr

08001f14 <_fini>:
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	bf00      	nop
 8001f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1a:	bc08      	pop	{r3}
 8001f1c:	469e      	mov	lr, r3
 8001f1e:	4770      	bx	lr
